import 'package:collection/collection.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:n_dimensional_array/domain/models/nd_array.dart';

void main() {
  const List testList1d = [
    // Dimension 1
    1, // [0]
    2, // [1]
    3, // [2]
    4, // [3]
  ];

  const List testList2d = [
    // Dimension 1
    [
      // Dimension 2
      1, // [0][0]
      2, // [0][1]
    ],
    // Dimension 1
    [
      // Dimension 2
      3, // [1][0]
      4, // [1][1]
    ],
  ];

  const List testList3d = [
    // Dimension 1
    [
      // Dimension 2
      [
        // Dimension 3
        1, // [0][0][0]
        2, // [0][0][1]
      ],
      [
        3, // [0][1][0]
        4, // [0][1][1]
      ],
    ],
    // Dimension 1
    [
      // Dimension 2
      [
        // Dimension 3
        5, // [1][0][0]
        6, // [1][0][1]
      ],
      [
        7, // [1][1][0]
        8, // [1][1][1]
      ],
    ],
  ];

  const List testList4d = [
    // Dimension 1
    [
      // Dimension 2
      [
        // Dimension 3
        [
          // Dimension 4
          1, // [0][0][0][0]
          2, // [0][0][0][1]
        ],
        [
          3, // [0][0][1][1]
          4, // [0][0][1][1]
        ],
      ],
      // Dimension 2
      [
        // Dimension 3
        [
          4, // [0][1][0][0]
          3, // [0][1][0][1]
        ],
        [
          2, // [0][1][1][0]
          1, // [0][1][1][1]
        ],
      ],
    ],
    // Dimension 1
    [
      // Dimension 2
      [
        // Dimension 3
        [
          5, // [1][0][0][0]
          6, // [1][0][0][1]
        ],
        [
          7, // [1][0][1][0]
          8, // [1][0][1][1]
        ],
      ],
      // Dimension 2
      [
        // Dimension 3
        [
          8, // [1][1][0][0]
          7, // [1][1][0][1]
        ],
        [
          6, // [1][1][1][0]
          5, // [1][1][1][1]
        ],
      ],
    ],
    // Dimension 1
    [
      // Dimension 2
      [
        // Dimension 3
        [
          9, // [2][0][0][0]
          10, // [2][0][0][1]
        ],
        [
          11, // [2][0][1][0]
          12, // [2][0][1][1]
        ],
      ],
      // Dimension 2
      [
        // Dimension 3
        [
          12, // [2][1][0][0]
          11, // [2][1][0][1]
        ],
        [
          10, // [2][1][1][0]
          9, // [2][1][1][1]
        ],
      ],
    ],
    // Dimension 1
    [
      // Dimension 2
      [
        // Dimension 3
        [
          13, // [3][0][0][0]
          14, // [3][0][0][1]
        ],
        [
          15, // [3][0][1][0]
          16, // [3][0][1][1]
        ],
      ],
      // Dimension 2
      [
        // Dimension 3
        [
          16, // [3][1][0][0]
          15, // [3][1][0][1]
        ],
        [
          14, // [3][1][1][0]
          13, // [3][1][1][1]
        ],
      ],
    ],
  ];

  const List testList12d = [
    // Dimension 1
    [
      // Dimension 2
      [
        // Dimension 3
        [
          // Dimension 4
          [
            // Dimension 5
            [
              // Dimension 6
              [
                // Dimension 7
                [
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          1, // [0][0][0][0][0][0][0][0][0][0][0][0]
                          2, // [0][0][0][0][0][0][0][0][0][0][0][1]
                          3, // [0][0][0][0][0][0][0][0][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "a", // [0][0][0][0][0][0][0][0][0][0][1][0]
                          "b", // [0][0][0][0][0][0][0][0][0][0][1][1]
                          "c", // [0][0][0][0][0][0][0][0][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          4, // [0][0][0][0][0][0][0][0][1][0][0][0]
                          5, // [0][0][0][0][0][0][0][0][1][0][0][1]
                          6, // [0][0][0][0][0][0][0][0][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "d", // [0][0][0][0][0][0][0][0][1][0][1][0]
                          "e", // [0][0][0][0][0][0][0][0][1][0][1][1]
                          "f", // [0][0][0][0][0][0][0][0][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          7, // [0][0][0][0][0][0][0][1][0][0][0][0]
                          8, // [0][0][0][0][0][0][0][1][0][0][0][1]
                          9, // [0][0][0][0][0][0][0][1][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "g", // [0][0][0][0][0][0][0][1][0][0][1][0]
                          "h", // [0][0][0][0][0][0][0][1][0][0][1][1]
                          "i", // [0][0][0][0][0][0][0][1][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          10, // [0][0][0][0][0][0][0][1][1][0][0][0]
                          11, // [0][0][0][0][0][0][0][1][1][0][0][1]
                          12, // [0][0][0][0][0][0][0][1][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "j", // [0][0][0][0][0][0][0][1][1][0][1][0]
                          "k", // [0][0][0][0][0][0][0][1][1][0][1][1]
                          "l", // [0][0][0][0][0][0][0][1][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          13, // [0][0][0][0][0][0][0][2][0][0][0][0]
                          14, // [0][0][0][0][0][0][0][2][0][0][0][1]
                          15, // [0][0][0][0][0][0][0][2][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "m", // [0][0][0][0][0][0][0][2][0][0][1][0]
                          "n", // [0][0][0][0][0][0][0][2][0][0][1][1]
                          "o", // [0][0][0][0][0][0][0][2][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          16, // [0][0][0][0][0][0][0][2][1][0][0][0]
                          17, // [0][0][0][0][0][0][0][2][1][0][0][1]
                          18, // [0][0][0][0][0][0][0][2][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "p", // [0][0][0][0][0][0][0][2][1][0][1][0]
                          "q", // [0][0][0][0][0][0][0][2][1][0][1][1]
                          "r", // [0][0][0][0][0][0][0][2][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                ],
                // Dimension 7
                [
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          19, // [0][0][0][0][0][0][1][0][0][0][0][0]
                          20, // [0][0][0][0][0][0][1][0][0][0][0][1]
                          21, // [0][0][0][0][0][0][1][0][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "s", // [0][0][0][0][0][0][1][0][0][0][1][0]
                          "t", // [0][0][0][0][0][0][1][0][0][0][1][1]
                          "u", // [0][0][0][0][0][0][1][0][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          22, // [0][0][0][0][0][0][1][0][1][0][0][0]
                          23, // [0][0][0][0][0][0][1][0][1][0][0][1]
                          24, // [0][0][0][0][0][0][1][0][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "v", // [0][0][0][0][0][0][1][0][1][0][1][0]
                          "w", // [0][0][0][0][0][0][1][0][1][0][1][1]
                          "x", // [0][0][0][0][0][0][1][0][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          25, // [0][0][0][0][0][0][1][1][0][0][0][0]
                          26, // [0][0][0][0][0][0][1][1][0][0][0][1]
                          27, // [0][0][0][0][0][0][1][1][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "y", // [0][0][0][0][0][0][1][1][0][0][1][0]
                          "z", // [0][0][0][0][0][0][1][1][0][0][1][1]
                          "aa", // [0][0][0][0][0][0][1][1][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          28, // [0][0][0][0][0][0][1][1][1][0][0][0]
                          29, // [0][0][0][0][0][0][1][1][1][0][0][1]
                          30, // [0][0][0][0][0][0][1][1][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "ab", // [0][0][0][0][0][0][1][1][1][0][1][0]
                          "ac", // [0][0][0][0][0][0][1][1][1][0][1][1]
                          "ad", // [0][0][0][0][0][0][1][1][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          31, // [0][0][0][0][0][0][1][2][0][0][0][0]
                          32, // [0][0][0][0][0][0][1][2][0][0][0][1]
                          33, // [0][0][0][0][0][0][1][2][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "ae", // [0][0][0][0][0][0][1][2][0][0][1][0]
                          "af", // [0][0][0][0][0][0][1][2][0][0][1][1]
                          "ag", // [0][0][0][0][0][0][1][2][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          34, // [0][0][0][0][0][0][1][2][1][0][0][0]
                          35, // [0][0][0][0][0][0][1][2][1][0][0][1]
                          36, // [0][0][0][0][0][0][1][2][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "ah", // [0][0][0][0][0][0][1][2][1][0][1][0]
                          "ai", // [0][0][0][0][0][0][1][2][1][0][1][1]
                          "aj", // [0][0][0][0][0][0][1][2][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                ],
              ],
              // Dimension 6
              [
                // Dimension 7
                [
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          37, // [0][0][0][0][0][1][0][0][0][0][0][0]
                          38, // [0][0][0][0][0][1][0][0][0][0][0][1]
                          39, // [0][0][0][0][0][1][0][0][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "ak", // [0][0][0][0][0][1][0][0][0][0][1][0]
                          "al", // [0][0][0][0][0][1][0][0][0][0][1][1]
                          "am", // [0][0][0][0][0][1][0][0][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          40, // [0][0][0][0][0][1][0][0][1][0][0][0]
                          41, // [0][0][0][0][0][1][0][0][1][0][0][1]
                          42, // [0][0][0][0][0][1][0][0][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "an", // [0][0][0][0][0][1][0][0][1][0][1][0]
                          "ao", // [0][0][0][0][0][1][0][0][1][0][1][1]
                          "ap", // [0][0][0][0][0][1][0][0][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          43, // [0][0][0][0][0][1][0][1][0][0][0][0]
                          44, // [0][0][0][0][0][1][0][1][0][0][0][1]
                          45, // [0][0][0][0][0][1][0][1][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "aq", // [0][0][0][0][0][1][0][1][0][0][1][0]
                          "ar", // [0][0][0][0][0][1][0][1][0][0][1][1]
                          "as", // [0][0][0][0][0][1][0][1][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          46, // [0][0][0][0][0][1][0][1][1][0][0][0]
                          47, // [0][0][0][0][0][1][0][1][1][0][0][1]
                          48, // [0][0][0][0][0][1][0][1][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "at", // [0][0][0][0][0][1][0][1][1][0][1][0]
                          "au", // [0][0][0][0][0][1][0][1][1][0][1][1]
                          "av", // [0][0][0][0][0][1][0][1][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          49, // [0][0][0][0][0][1][0][2][0][0][0][0]
                          50, // [0][0][0][0][0][1][0][2][0][0][0][1]
                          51, // [0][0][0][0][0][1][0][2][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "aw", // [0][0][0][0][0][1][0][2][0][0][1][0]
                          "ax", // [0][0][0][0][0][1][0][2][0][0][1][1]
                          "ay", // [0][0][0][0][0][1][0][2][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          52, // [0][0][0][0][0][1][0][2][1][0][0][0]
                          53, // [0][0][0][0][0][1][0][2][1][0][0][1]
                          54, // [0][0][0][0][0][1][0][2][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "az", // [0][0][0][0][0][1][0][2][1][0][1][0]
                          "ba", // [0][0][0][0][0][1][0][2][1][0][1][1]
                          "bb", // [0][0][0][0][0][1][0][2][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                ],
                // Dimension 7
                [
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          55, // [0][0][0][0][0][1][1][0][0][0][0][0]
                          56, // [0][0][0][0][0][1][1][0][0][0][0][1]
                          57, // [0][0][0][0][0][1][1][0][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "bc", // [0][0][0][0][0][1][1][0][0][0][1][0]
                          "bd", // [0][0][0][0][0][1][1][0][0][0][1][1]
                          "be", // [0][0][0][0][0][1][1][0][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          58, // [0][0][0][0][0][1][1][0][1][0][0][0]
                          59, // [0][0][0][0][0][1][1][0][1][0][0][1]
                          60, // [0][0][0][0][0][1][1][0][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "bf", // [0][0][0][0][0][1][1][0][1][0][1][0]
                          "bg", // [0][0][0][0][0][1][1][0][1][0][1][1]
                          "bh", // [0][0][0][0][0][1][1][0][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          61, // [0][0][0][0][0][1][1][1][0][0][0][0]
                          62, // [0][0][0][0][0][1][1][1][0][0][0][1]
                          63, // [0][0][0][0][0][1][1][1][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "bi", // [0][0][0][0][0][1][1][1][0][0][1][0]
                          "bj", // [0][0][0][0][0][1][1][1][0][0][1][1]
                          "bk", // [0][0][0][0][0][1][1][1][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          64, // [0][0][0][0][0][1][1][1][1][0][0][0]
                          65, // [0][0][0][0][0][1][1][1][1][0][0][1]
                          66, // [0][0][0][0][0][1][1][1][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "bl", // [0][0][0][0][0][1][1][1][1][0][1][0]
                          "bm", // [0][0][0][0][0][1][1][1][1][0][1][1]
                          "bn", // [0][0][0][0][0][1][1][1][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          67, // [0][0][0][0][0][1][1][2][0][0][0][0]
                          68, // [0][0][0][0][0][1][1][2][0][0][0][1]
                          69, // [0][0][0][0][0][1][1][2][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "bo", // [0][0][0][0][0][1][1][2][0][0][1][0]
                          "bp", // [0][0][0][0][0][1][1][2][0][0][1][1]
                          "bq", // [0][0][0][0][0][1][1][2][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          70, // [0][0][0][0][0][1][1][2][1][0][0][0]
                          71, // [0][0][0][0][0][1][1][2][1][0][0][1]
                          72, // [0][0][0][0][0][1][1][2][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "br", // [0][0][0][0][0][1][1][2][1][0][1][0]
                          "bs", // [0][0][0][0][0][1][1][2][1][0][1][1]
                          "bt", // [0][0][0][0][0][1][1][2][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                ],
              ],
            ],
            // Dimension 5
            [
              // Dimension 6
              [
                // Dimension 7
                [
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          73, // [0][0][0][0][1][0][0][0][0][0][0][0]
                          74, // [0][0][0][0][1][0][0][0][0][0][0][1]
                          75, // [0][0][0][0][1][0][0][0][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "bu", // [0][0][0][0][1][0][0][0][0][0][1][0]
                          "bv", // [0][0][0][0][1][0][0][0][0][0][1][1]
                          "bw", // [0][0][0][0][1][0][0][0][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          76, // [0][0][0][0][1][0][0][0][1][0][0][0]
                          77, // [0][0][0][0][1][0][0][0][1][0][0][1]
                          78, // [0][0][0][0][1][0][0][0][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "bx", // [0][0][0][0][1][0][0][0][1][0][1][0]
                          "by", // [0][0][0][0][1][0][0][0][1][0][1][1]
                          "bz", // [0][0][0][0][1][0][0][0][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          79, // [0][0][0][0][1][0][0][1][0][0][0][0]
                          80, // [0][0][0][0][1][0][0][1][0][0][0][1]
                          81, // [0][0][0][0][1][0][0][1][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "ca", // [0][0][0][0][1][0][0][1][0][0][1][0]
                          "cb", // [0][0][0][0][1][0][0][1][0][0][1][1]
                          "cc", // [0][0][0][0][1][0][0][1][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          82, // [0][0][0][0][1][0][0][1][1][0][0][0]
                          83, // [0][0][0][0][1][0][0][1][1][0][0][1]
                          84, // [0][0][0][0][1][0][0][1][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "cd", // [0][0][0][0][1][0][0][1][1][0][1][0]
                          "ce", // [0][0][0][0][1][0][0][1][1][0][1][1]
                          "cf", // [0][0][0][0][1][0][0][1][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          85, // [0][0][0][0][1][0][0][2][0][0][0][0]
                          86, // [0][0][0][0][1][0][0][2][0][0][0][1]
                          87, // [0][0][0][0][1][0][0][2][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "cg", // [0][0][0][0][1][0][0][2][0][0][1][0]
                          "ch", // [0][0][0][0][1][0][0][2][0][0][1][1]
                          "ci", // [0][0][0][0][1][0][0][2][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          88, // [0][0][0][0][1][0][0][2][1][0][0][0]
                          89, // [0][0][0][0][1][0][0][2][1][0][0][1]
                          90, // [0][0][0][0][1][0][0][2][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "cj", // [0][0][0][0][1][0][0][2][1][0][1][0]
                          "ck", // [0][0][0][0][1][0][0][2][1][0][1][1]
                          "cl", // [0][0][0][0][1][0][0][2][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                ],
                // Dimension 7
                [
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          91, // [0][0][0][0][1][0][1][0][0][0][0][0]
                          92, // [0][0][0][0][1][0][1][0][0][0][0][1]
                          93, // [0][0][0][0][1][0][1][0][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "cm", // [0][0][0][0][1][0][1][0][0][0][1][0]
                          "cn", // [0][0][0][0][1][0][1][0][0][0][1][1]
                          "co", // [0][0][0][0][1][0][1][0][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          95, // [0][0][0][0][1][0][1][0][1][0][0][0]
                          95, // [0][0][0][0][1][0][1][0][1][0][0][1]
                          96, // [0][0][0][0][1][0][1][0][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "cp", // [0][0][0][0][1][0][1][0][1][0][1][0]
                          "cq", // [0][0][0][0][1][0][1][0][1][0][1][1]
                          "cr", // [0][0][0][0][1][0][1][0][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          97, // [0][0][0][0][1][0][1][1][0][0][0][0]
                          98, // [0][0][0][0][1][0][1][1][0][0][0][1]
                          99, // [0][0][0][0][1][0][1][1][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "cs", // [0][0][0][0][1][0][1][1][0][0][1][0]
                          "ct", // [0][0][0][0][1][0][1][1][0][0][1][1]
                          "cu", // [0][0][0][0][1][0][1][1][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          100, // [0][0][0][0][1][0][1][1][1][0][0][0]
                          101, // [0][0][0][0][1][0][1][1][1][0][0][1]
                          102, // [0][0][0][0][1][0][1][1][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "cv", // [0][0][0][0][1][0][1][1][1][0][1][0]
                          "cw", // [0][0][0][0][1][0][1][1][1][0][1][1]
                          "cx", // [0][0][0][0][1][0][1][1][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          103, // [0][0][0][0][1][0][1][2][0][0][0][0]
                          104, // [0][0][0][0][1][0][1][2][0][0][0][1]
                          105, // [0][0][0][0][1][0][1][2][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "cy", // [0][0][0][0][1][0][1][2][0][0][1][0]
                          "cz", // [0][0][0][0][1][0][1][2][0][0][1][1]
                          "da", // [0][0][0][0][1][0][1][2][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          106, // [0][0][0][0][1][0][1][2][1][0][0][0]
                          107, // [0][0][0][0][1][0][1][2][1][0][0][1]
                          108, // [0][0][0][0][1][0][1][2][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "db", // [0][0][0][0][1][0][1][2][1][0][1][0]
                          "dc", // [0][0][0][0][1][0][1][2][1][0][1][1]
                          "dd", // [0][0][0][0][1][0][1][2][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                ],
              ],
              // Dimension 6
              [
                // Dimension 7
                [
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          109, // [0][0][0][0][1][1][0][0][0][0][0][0]
                          110, // [0][0][0][0][1][1][0][0][0][0][0][1]
                          111, // [0][0][0][0][1][1][0][0][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "de", // [0][0][0][0][1][1][0][0][0][0][1][0]
                          "df", // [0][0][0][0][1][1][0][0][0][0][1][1]
                          "dg", // [0][0][0][0][1][1][0][0][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          112, // [0][0][0][0][1][1][0][0][1][0][0][0]
                          113, // [0][0][0][0][1][1][0][0][1][0][0][1]
                          114, // [0][0][0][0][1][1][0][0][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "dh", // [0][0][0][0][1][1][0][0][1][0][1][0]
                          "di", // [0][0][0][0][1][1][0][0][1][0][1][1]
                          "dj", // [0][0][0][0][1][1][0][0][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          115, // [0][0][0][0][1][1][0][1][0][0][0][0]
                          116, // [0][0][0][0][1][1][0][1][0][0][0][1]
                          117, // [0][0][0][0][1][1][0][1][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "dk", // [0][0][0][0][1][1][0][1][0][0][1][0]
                          "dl", // [0][0][0][0][1][1][0][1][0][0][1][1]
                          "dm", // [0][0][0][0][1][1][0][1][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          118, // [0][0][0][0][1][1][0][1][1][0][0][0]
                          119, // [0][0][0][0][1][1][0][1][1][0][0][1]
                          120, // [0][0][0][0][1][1][0][1][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "dn", // [0][0][0][0][1][1][0][1][1][0][1][0]
                          "do", // [0][0][0][0][1][1][0][1][1][0][1][1]
                          "dp", // [0][0][0][0][1][1][0][1][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          121, // [0][0][0][0][1][1][0][2][0][0][0][0]
                          122, // [0][0][0][0][1][1][0][2][0][0][0][1]
                          123, // [0][0][0][0][1][1][0][2][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "dq", // [0][0][0][0][1][1][0][2][0][0][1][0]
                          "dr", // [0][0][0][0][1][1][0][2][0][0][1][1]
                          "ds", // [0][0][0][0][1][1][0][2][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          124, // [0][0][0][0][1][1][0][2][1][0][0][0]
                          125, // [0][0][0][0][1][1][0][2][1][0][0][1]
                          126, // [0][0][0][0][1][1][0][2][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "dt", // [0][0][0][0][1][1][0][2][1][0][1][0]
                          "du", // [0][0][0][0][1][1][0][2][1][0][1][1]
                          "dv", // [0][0][0][0][1][1][0][2][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                ],
                // Dimension 7
                [
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          127, // [0][0][0][0][1][1][1][0][0][0][0][0]
                          128, // [0][0][0][0][1][1][1][0][0][0][0][1]
                          129, // [0][0][0][0][1][1][1][0][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "dw", // [0][0][0][0][1][1][1][0][0][0][1][0]
                          "dx", // [0][0][0][0][1][1][1][0][0][0][1][1]
                          "dy", // [0][0][0][0][1][1][1][0][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          130, // [0][0][0][0][1][1][1][0][1][0][0][0]
                          131, // [0][0][0][0][1][1][1][0][1][0][0][1]
                          132, // [0][0][0][0][1][1][1][0][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "dz", // [0][0][0][0][1][1][1][0][1][0][1][0]
                          "ea", // [0][0][0][0][1][1][1][0][1][0][1][1]
                          "eb", // [0][0][0][0][1][1][1][0][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          133, // [0][0][0][0][1][1][1][1][0][0][0][0]
                          134, // [0][0][0][0][1][1][1][1][0][0][0][1]
                          135, // [0][0][0][0][1][1][1][1][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "ec", // [0][0][0][0][1][1][1][1][0][0][1][0]
                          "ed", // [0][0][0][0][1][1][1][1][0][0][1][1]
                          "ee", // [0][0][0][0][1][1][1][1][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          136, // [0][0][0][0][1][1][1][1][1][0][0][0]
                          137, // [0][0][0][0][1][1][1][1][1][0][0][1]
                          138, // [0][0][0][0][1][1][1][1][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "ef", // [0][0][0][0][1][1][1][1][1][0][1][0]
                          "eg", // [0][0][0][0][1][1][1][1][1][0][1][1]
                          "eh", // [0][0][0][0][1][1][1][1][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          139, // [0][0][0][0][1][1][1][2][0][0][0][0]
                          140, // [0][0][0][0][1][1][1][2][0][0][0][1]
                          141, // [0][0][0][0][1][1][1][2][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "ei", // [0][0][0][0][1][1][1][2][0][0][1][0]
                          "ej", // [0][0][0][0][1][1][1][2][0][0][1][1]
                          "ek", // [0][0][0][0][1][1][1][2][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          142, // [0][0][0][0][1][1][1][2][1][0][0][0]
                          143, // [0][0][0][0][1][1][1][2][1][0][0][1]
                          144, // [0][0][0][0][1][1][1][2][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "el", // [0][0][0][0][1][1][1][2][1][0][1][0]
                          "em", // [0][0][0][0][1][1][1][2][1][0][1][1]
                          "en", // [0][0][0][0][1][1][1][2][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                ],
              ],
            ],
          ],
        ],
        // Dimension 3
        [
          // Dimension 4
          [
            // Dimension 5
            [
              // Dimension 6
              [
                // Dimension 7
                [
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          6523, // [0][0][1][0][0][0][0][0][0][0][0][0]
                          65, // [0][0][1][0][0][0][0][0][0][0][0][1]
                          143, // [0][0][1][0][0][0][0][0][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "hjkDhg", // [0][0][1][0][0][0][0][0][0][0][1][0]
                          "ghg4hb", // [0][0][1][0][0][0][0][0][0][0][1][1]
                          "gui6r7", // [0][0][1][0][0][0][0][0][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          563, // [0][0][1][0][0][0][0][0][1][0][0][0]
                          73, // [0][0][1][0][0][0][0][0][1][0][0][1]
                          537, // [0][0][1][0][0][0][0][0][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "bsd6f546", // [0][0][1][0][0][0][0][0][1][0][1][0]
                          "DF^YH", // [0][0][1][0][0][0][0][0][1][0][1][1]
                          "fddDfa", // [0][0][1][0][0][0][0][0][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          735, // [0][0][1][0][0][0][0][1][0][0][0][0]
                          573, // [0][0][1][0][0][0][0][1][0][0][0][1]
                          753, // [0][0][1][0][0][0][0][1][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "g", // [0][0][1][0][0][0][0][1][0][0][1][0]
                          "h", // [0][0][1][0][0][0][0][1][0][0][1][1]
                          "i", // [0][0][1][0][0][0][0][1][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          45677, // [0][0][1][0][0][0][0][1][1][0][0][0]
                          98, // [0][0][1][0][0][0][0][1][1][0][0][1]
                          16572, // [0][0][1][0][0][0][0][1][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "j", // [0][0][1][0][0][0][0][1][1][0][1][0]
                          "k", // [0][0][1][0][0][0][0][1][1][0][1][1]
                          "l", // [0][0][1][0][0][0][0][1][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          1356, // [0][0][1][0][0][0][0][2][0][0][0][0]
                          24, // [0][0][1][0][0][0][0][2][0][0][0][1]
                          5715, // [0][0][1][0][0][0][0][2][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "asDdDdGfm", // [0][0][1][0][0][0][0][2][0][0][1][0]
                          "ndfSdf", // [0][0][1][0][0][0][0][2][0][0][1][1]
                          "oDFD", // [0][0][1][0][0][0][0][2][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          54673, // [0][0][1][0][0][0][0][2][1][0][0][0]
                          3456, // [0][0][1][0][0][0][0][2][1][0][0][1]
                          55, // [0][0][1][0][0][0][0][2][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "kDk fRjd", // [0][0][1][0][0][0][0][2][1][0][1][0]
                          "q d", // [0][0][1][0][0][0][0][2][1][0][1][1]
                          "rdgGfdDad", // [0][0][1][0][0][0][0][2][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                ],
                // Dimension 7
                [
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          56356, // [0][0][1][0][0][0][1][0][0][0][0][0]
                          55, // [0][0][1][0][0][0][1][0][0][0][0][1]
                          457, // [0][0][1][0][0][0][1][0][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "sd", // [0][0][1][0][0][0][1][0][0][0][1][0]
                          "te", // [0][0][1][0][0][0][1][0][0][0][1][1]
                          "ude", // [0][0][1][0][0][0][1][0][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          22, // [0][0][1][0][0][0][1][0][1][0][0][0]
                          23, // [0][0][1][0][0][0][1][0][1][0][0][1]
                          24, // [0][0][1][0][0][0][1][0][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "vDdfFg", // [0][0][1][0][0][0][1][0][1][0][1][0]
                          "wsd", // [0][0][1][0][0][0][1][0][1][0][1][1]
                          "xfe", // [0][0][1][0][0][0][1][0][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          1234, // [0][0][1][0][0][0][1][1][0][0][0][0]
                          52, // [0][0][1][0][0][0][1][1][0][0][0][1]
                          99705, // [0][0][1][0][0][0][1][1][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "yDFfGfZds", // [0][0][1][0][0][0][1][1][0][0][1][0]
                          "zDFe", // [0][0][1][0][0][0][1][1][0][0][1][1]
                          "aa", // [0][0][1][0][0][0][1][1][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          462, // [0][0][1][0][0][0][1][1][1][0][0][0]
                          727, // [0][0][1][0][0][0][1][1][1][0][0][1]
                          8382, // [0][0][1][0][0][0][1][1][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "ab", // [0][0][1][0][0][0][1][1][1][0][1][0]
                          "H", // [0][0][1][0][0][0][1][1][1][0][1][1]
                          "ht", // [0][0][1][0][0][0][1][1][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          563457, // [0][0][1][0][0][0][1][2][0][0][0][0]
                          24, // [0][0][1][0][0][0][1][2][0][0][0][1]
                          757247, // [0][0][1][0][0][0][1][2][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "M", // [0][0][1][0][0][0][1][2][0][0][1][0]
                          "M", // [0][0][1][0][0][0][1][2][0][0][1][1]
                          "M", // [0][0][1][0][0][0][1][2][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          6727, // [0][0][1][0][0][0][1][2][1][0][0][0]
                          3411, // [0][0][1][0][0][0][1][2][1][0][0][1]
                          3478900, // [0][0][1][0][0][0][1][2][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "a5asd5ty", // [0][0][1][0][0][0][1][2][1][0][1][0]
                          "ert7usj5", // [0][0][1][0][0][0][1][2][1][0][1][1]
                          "dfrDn56", // [0][0][1][0][0][0][1][2][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                ],
              ],
              // Dimension 6
              [
                // Dimension 7
                [
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          5892, // [0][0][1][0][0][1][0][0][0][0][0][0]
                          2002, // [0][0][1][0][0][1][0][0][0][0][0][1]
                          1003367, // [0][0][1][0][0][1][0][0][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "aBka0y4", // [0][0][1][0][0][1][0][0][0][0][1][0]
                          "a5l", // [0][0][1][0][0][1][0][0][0][0][1][1]
                          "am", // [0][0][1][0][0][1][0][0][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          452728, // [0][0][1][0][0][1][0][0][1][0][0][0]
                          66, // [0][0][1][0][0][1][0][0][1][0][0][1]
                          84838, // [0][0][1][0][0][1][0][0][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "df  an", // [0][0][1][0][0][1][0][0][1][0][1][0]
                          "HR r g v d", // [0][0][1][0][0][1][0][0][1][0][1][1]
                          "adfFDp", // [0][0][1][0][0][1][0][0][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          58383, // [0][0][1][0][0][1][0][1][0][0][0][0]
                          2244, // [0][0][1][0][0][1][0][1][0][0][0][1]
                          55, // [0][0][1][0][0][1][0][1][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "asq", // [0][0][1][0][0][1][0][1][0][0][1][0]
                          "a4r", // [0][0][1][0][0][1][0][1][0][0][1][1]
                          "ah5s", // [0][0][1][0][0][1][0][1][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          1, // [0][0][1][0][0][1][0][1][1][0][0][0]
                          922458, // [0][0][1][0][0][1][0][1][1][0][0][1]
                          65004, // [0][0][1][0][0][1][0][1][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "a4z6t", // [0][0][1][0][0][1][0][1][1][0][1][0]
                          "a4nau", // [0][0][1][0][0][1][0][1][1][0][1][1]
                          "n4at", // [0][0][1][0][0][1][0][1][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          30038, // [0][0][1][0][0][1][0][2][0][0][0][0]
                          151, // [0][0][1][0][0][1][0][2][0][0][0][1]
                          -9, // [0][0][1][0][0][1][0][2][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "zn46564n4", // [0][0][1][0][0][1][0][2][0][0][1][0]
                          "asd5a5", // [0][0][1][0][0][1][0][2][0][0][1][1]
                          " ver  w ", // [0][0][1][0][0][1][0][2][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          2345267, // [0][0][1][0][0][1][0][2][1][0][0][0]
                          44, // [0][0][1][0][0][1][0][2][1][0][0][1]
                          11677, // [0][0][1][0][0][1][0][2][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "aDE%^z", // [0][0][1][0][0][1][0][2][1][0][1][0]
                          "D%N", // [0][0][1][0][0][1][0][2][1][0][1][1]
                          "[0][0][1][0][0][1][0][2][1][0][1][2]", // [0][0][1][0][0][1][0][2][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                ],
                // Dimension 7
                [
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          4771, // [0][0][1][0][0][1][1][0][0][0][0][0]
                          557, // [0][0][1][0][0][1][1][0][0][0][0][1]
                          15 - 7, // [0][0][1][0][0][1][1][0][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "s4", // [0][0][1][0][0][1][1][0][0][0][1][0]
                          "a", // [0][0][1][0][0][1][1][0][0][0][1][1]
                          "b", // [0][0][1][0][0][1][1][0][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          179356, // [0][0][1][0][0][1][1][0][1][0][0][0]
                          4476, // [0][0][1][0][0][1][1][0][1][0][0][1]
                          0, // [0][0][1][0][0][1][1][0][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "c", // [0][0][1][0][0][1][1][0][1][0][1][0]
                          "d", // [0][0][1][0][0][1][1][0][1][0][1][1]
                          "e", // [0][0][1][0][0][1][1][0][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          477, // [0][0][1][0][0][1][1][1][0][0][0][0]
                          6627, // [0][0][1][0][0][1][1][1][0][0][0][1]
                          44, // [0][0][1][0][0][1][1][1][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "f", // [0][0][1][0][0][1][1][1][0][0][1][0]
                          "g", // [0][0][1][0][0][1][1][1][0][0][1][1]
                          "z", // [0][0][1][0][0][1][1][1][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          45267, // [0][0][1][0][0][1][1][1][1][0][0][0]
                          756, // [0][0][1][0][0][1][1][1][1][0][0][1]
                          4472714, // [0][0][1][0][0][1][1][1][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "y", // [0][0][1][0][0][1][1][1][1][0][1][0]
                          "x", // [0][0][1][0][0][1][1][1][1][0][1][1]
                          "w", // [0][0][1][0][0][1][1][1][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          46727, // [0][0][1][0][0][1][1][2][0][0][0][0]
                          68, // [0][0][1][0][0][1][1][2][0][0][0][1]
                          457, // [0][0][1][0][0][1][1][2][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "boo", // [0][0][1][0][0][1][1][2][0][0][1][0]
                          "ae43", // [0][0][1][0][0][1][1][2][0][0][1][1]
                          "asd fa sd4", // [0][0][1][0][0][1][1][2][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          3, // [0][0][1][0][0][1][1][2][1][0][0][0]
                          6727, // [0][0][1][0][0][1][1][2][1][0][0][1]
                          5672, // [0][0][1][0][0][1][1][2][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "bra sd", // [0][0][1][0][0][1][1][2][1][0][1][0]
                          "k4789d3 klGud 83 s", // [0][0][1][0][0][1][1][2][1][0][1][1]
                          "bt", // [0][0][1][0][0][1][1][2][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                ],
              ],
            ],
            // Dimension 5
            [
              // Dimension 6
              [
                // Dimension 7
                [
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          745, // [0][0][1][0][1][0][0][0][0][0][0][0]
                          5, // [0][0][1][0][1][0][0][0][0][0][0][1]
                          5, // [0][0][1][0][1][0][0][0][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "df4h5 f", // [0][0][1][0][1][0][0][0][0][0][1][0]
                          "d r443 s", // [0][0][1][0][1][0][0][0][0][0][1][1]
                          "bw", // [0][0][1][0][1][0][0][0][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          74, // [0][0][1][0][1][0][0][0][1][0][0][0]
                          74, // [0][0][1][0][1][0][0][0][1][0][0][1]
                          74, // [0][0][1][0][1][0][0][0][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "bx", // [0][0][1][0][1][0][0][0][1][0][1][0]
                          "sd 4 46", // [0][0][1][0][1][0][0][0][1][0][1][1]
                          "bz", // [0][0][1][0][1][0][0][0][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          74, // [0][0][1][0][1][0][0][1][0][0][0][0]
                          74, // [0][0][1][0][1][0][0][1][0][0][0][1]
                          74, // [0][0][1][0][1][0][0][1][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "ca", // [0][0][1][0][1][0][0][1][0][0][1][0]
                          "cb", // [0][0][1][0][1][0][0][1][0][0][1][1]
                          "7hw46 ga def", // [0][0][1][0][1][0][0][1][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          9823, // [0][0][1][0][1][0][0][1][1][0][0][0]
                          823822, // [0][0][1][0][1][0][0][1][1][0][0][1]
                          828, // [0][0][1][0][1][0][0][1][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "cd", // [0][0][1][0][1][0][0][1][1][0][1][0]
                          "a  t3 ds", // [0][0][1][0][1][0][0][1][1][0][1][1]
                          "cf", // [0][0][1][0][1][0][0][1][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          7345, // [0][0][1][0][1][0][0][2][0][0][0][0]
                          1345, // [0][0][1][0][1][0][0][2][0][0][0][1]
                          4145, // [0][0][1][0][1][0][0][2][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "a45r sd", // [0][0][1][0][1][0][0][2][0][0][1][0]
                          "d4frh", // [0][0][1][0][1][0][0][2][0][0][1][1]
                          "asdf a4sdf 4asd6f d", // [0][0][1][0][1][0][0][2][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          5789, // [0][0][1][0][1][0][0][2][1][0][0][0]
                          775, // [0][0][1][0][1][0][0][2][1][0][0][1]
                          789, // [0][0][1][0][1][0][0][2][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "g>hkr    .r 35  4 5ht,,r.brt d", // [0][0][1][0][1][0][0][2][1][0][1][0]
                          "f", // [0][0][1][0][1][0][0][2][1][0][1][1]
                          "gs45", // [0][0][1][0][1][0][0][2][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                ],
                // Dimension 7
                [
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          7823, // [0][0][1][0][1][0][1][0][0][0][0][0]
                          92, // [0][0][1][0][1][0][1][0][0][0][0][1]
                          45672, // [0][0][1][0][1][0][1][0][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "cm", // [0][0][1][0][1][0][1][0][0][0][1][0]
                          "cn", // [0][0][1][0][1][0][1][0][0][0][1][1]
                          "co", // [0][0][1][0][1][0][1][0][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          95, // [0][0][1][0][1][0][1][0][1][0][0][0]
                          95, // [0][0][1][0][1][0][1][0][1][0][0][1]
                          96, // [0][0][1][0][1][0][1][0][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "cp", // [0][0][1][0][1][0][1][0][1][0][1][0]
                          "cq", // [0][0][1][0][1][0][1][0][1][0][1][1]
                          "cr", // [0][0][1][0][1][0][1][0][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          461, // [0][0][1][0][1][0][1][1][0][0][0][0]
                          98, // [0][0][1][0][1][0][1][1][0][0][0][1]
                          44, // [0][0][1][0][1][0][1][1][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "cs", // [0][0][1][0][1][0][1][1][0][0][1][0]
                          "ct", // [0][0][1][0][1][0][1][1][0][0][1][1]
                          "cu", // [0][0][1][0][1][0][1][1][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          111, // [0][0][1][0][1][0][1][1][1][0][0][0]
                          4564, // [0][0][1][0][1][0][1][1][1][0][0][1]
                          789, // [0][0][1][0][1][0][1][1][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "cv", // [0][0][1][0][1][0][1][1][1][0][1][0]
                          "cw", // [0][0][1][0][1][0][1][1][1][0][1][1]
                          "cx", // [0][0][1][0][1][0][1][1][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          88, // [0][0][1][0][1][0][1][2][0][0][0][0]
                          4564, // [0][0][1][0][1][0][1][2][0][0][0][1]
                          87789, // [0][0][1][0][1][0][1][2][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "cy", // [0][0][1][0][1][0][1][2][0][0][1][0]
                          "cz", // [0][0][1][0][1][0][1][2][0][0][1][1]
                          "da", // [0][0][1][0][1][0][1][2][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          17096, // [0][0][1][0][1][0][1][2][1][0][0][0]
                          107787, // [0][0][1][0][1][0][1][2][1][0][0][1]
                          1058, // [0][0][1][0][1][0][1][2][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "db", // [0][0][1][0][1][0][1][2][1][0][1][0]
                          "dc", // [0][0][1][0][1][0][1][2][1][0][1][1]
                          "dd", // [0][0][1][0][1][0][1][2][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                ],
              ],
              // Dimension 6
              [
                // Dimension 7
                [
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          4527, // [0][0][1][0][1][1][0][0][0][0][0][0]
                          44, // [0][0][1][0][1][1][0][0][0][0][0][1]
                          775, // [0][0][1][0][1][1][0][0][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "de", // [0][0][1][0][1][1][0][0][0][0][1][0]
                          "df", // [0][0][1][0][1][1][0][0][0][0][1][1]
                          "dg", // [0][0][1][0][1][1][0][0][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          5821, // [0][0][1][0][1][1][0][0][1][0][0][0]
                          457, // [0][0][1][0][1][1][0][0][1][0][0][1]
                          42, // [0][0][1][0][1][1][0][0][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "dh", // [0][0][1][0][1][1][0][0][1][0][1][0]
                          "di", // [0][0][1][0][1][1][0][0][1][0][1][1]
                          "dj", // [0][0][1][0][1][1][0][0][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          79034, // [0][0][1][0][1][1][0][1][0][0][0][0]
                          2457098, // [0][0][1][0][1][1][0][1][0][0][0][1]
                          1000001, // [0][0][1][0][1][1][0][1][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "dk", // [0][0][1][0][1][1][0][1][0][0][1][0]
                          "dl", // [0][0][1][0][1][1][0][1][0][0][1][1]
                          "dm", // [0][0][1][0][1][1][0][1][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          468345, // [0][0][1][0][1][1][0][1][1][0][0][0]
                          23462, // [0][0][1][0][1][1][0][1][1][0][0][1]
                          678, // [0][0][1][0][1][1][0][1][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "dn", // [0][0][1][0][1][1][0][1][1][0][1][0]
                          "do", // [0][0][1][0][1][1][0][1][1][0][1][1]
                          "dp", // [0][0][1][0][1][1][0][1][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          12, // [0][0][1][0][1][1][0][2][0][0][0][0]
                          457, // [0][0][1][0][1][1][0][2][0][0][0][1]
                          12, // [0][0][1][0][1][1][0][2][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "dq", // [0][0][1][0][1][1][0][2][0][0][1][0]
                          "dr", // [0][0][1][0][1][1][0][2][0][0][1][1]
                          "ds", // [0][0][1][0][1][1][0][2][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          15, // [0][0][1][0][1][1][0][2][1][0][0][0]
                          150, // [0][0][1][0][1][1][0][2][1][0][0][1]
                          1500, // [0][0][1][0][1][1][0][2][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "dt", // [0][0][1][0][1][1][0][2][1][0][1][0]
                          "du", // [0][0][1][0][1][1][0][2][1][0][1][1]
                          "dv", // [0][0][1][0][1][1][0][2][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                ],
                // Dimension 7
                [
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          457, // [0][0][1][0][1][1][1][0][0][0][0][0]
                          7372, // [0][0][1][0][1][1][1][0][0][0][0][1]
                          7459724, // [0][0][1][0][1][1][1][0][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "dw", // [0][0][1][0][1][1][1][0][0][0][1][0]
                          "dx", // [0][0][1][0][1][1][1][0][0][0][1][1]
                          "dy", // [0][0][1][0][1][1][1][0][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          345245, // [0][0][1][0][1][1][1][0][1][0][0][0]
                          45267, // [0][0][1][0][1][1][1][0][1][0][0][1]
                          7721, // [0][0][1][0][1][1][1][0][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "dz", // [0][0][1][0][1][1][1][0][1][0][1][0]
                          "ea", // [0][0][1][0][1][1][1][0][1][0][1][1]
                          "eb", // [0][0][1][0][1][1][1][0][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          4566879, // [0][0][1][0][1][1][1][1][0][0][0][0]
                          766, // [0][0][1][0][1][1][1][1][0][0][0][1]
                          4326727, // [0][0][1][0][1][1][1][1][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "\n", // [0][0][1][0][1][1][1][1][0][0][1][0]
                          " ", // [0][0][1][0][1][1][1][1][0][0][1][1]
                          "dfa45 a d", // [0][0][1][0][1][1][1][1][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          23465, // [0][0][1][0][1][1][1][1][1][0][0][0]
                          24578, // [0][0][1][0][1][1][1][1][1][0][0][1]
                          245782, // [0][0][1][0][1][1][1][1][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "4367 ", // [0][0][1][0][1][1][1][1][1][0][1][0]
                          "saDtj45", // [0][0][1][0][1][1][1][1][1][0][1][1]
                          " ", // [0][0][1][0][1][1][1][1][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                  // Dimension 8
                  [
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          239, // [0][0][1][0][1][1][1][2][0][0][0][0]
                          23, // [0][0][1][0][1][1][1][2][0][0][0][1]
                          3, // [0][0][1][0][1][1][1][2][0][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "asd 5 Rgv3d5sx", // [0][0][1][0][1][1][1][2][0][0][1][0]
                          "", // [0][0][1][0][1][1][1][2][0][0][1][1]
                          "654w345 fd", // [0][0][1][0][1][1][1][2][0][0][1][2]
                        ],
                      ],
                    ],
                    // Dimension 9
                    [
                      // Dimension 10
                      [
                        // Dimension 11
                        [
                          // Dimension 12
                          57838, // [0][0][1][0][1][1][1][2][1][0][0][0]
                          6, // [0][0][1][0][1][1][1][2][1][0][0][1]
                          145684, // [0][0][1][0][1][1][1][2][1][0][0][2]
                        ],
                        // Dimension 11
                        [
                          // Dimension 12
                          "rgsDFerg r sdf sd r45 3w s", // [0][0][1][0][1][1][1][2][1][0][1][0]
                          "dfg tyj", // [0][0][1][0][1][1][1][2][1][0][1][1]
                          "fgj56", // [0][0][1][0][1][1][1][2][1][0][1][2]
                        ],
                      ],
                    ],
                  ],
                ],
              ],
            ],
          ],
        ],
      ],
    ],
  ];

  group(
    "Creating NdArrays",
    () {
      test(
        "Standard constructor 1d",
        () {
          final NdArray ndArray = build1dArray();

          bool actual =
              const DeepCollectionEquality().equals(ndArray.data, testList1d);

          expect(actual, true);
        },
      );

      test(
        "fromList constructor 1d",
        () {
          final NdArray ndArray = NdArray.fromList(testList1d);

          bool actual =
              const DeepCollectionEquality().equals(ndArray.data, testList1d);

          expect(actual, true);
        },
      );

      test(
        "Standard constructor 2d",
        () {
          final NdArray ndArray = build2dArray();

          bool actual =
              const DeepCollectionEquality().equals(ndArray.data, testList2d);

          expect(actual, true);
        },
      );

      test(
        "fromList constructor 2d",
        () {
          final NdArray ndArray = NdArray.fromList(testList2d);

          bool actual =
              const DeepCollectionEquality().equals(ndArray.data, testList2d);

          expect(actual, true);
        },
      );

      test(
        "Standard constructor 3d",
        () {
          final NdArray ndArray = build3dArray();

          bool actual =
              const DeepCollectionEquality().equals(ndArray.data, testList3d);

          expect(actual, true);
        },
      );

      test(
        "fromList constructor 3d",
        () {
          final NdArray ndArray = NdArray.fromList(testList3d);

          bool actual =
              const DeepCollectionEquality().equals(ndArray.data, testList3d);

          expect(actual, true);
        },
      );

      test(
        "Standard constructor 4d",
        () {
          final NdArray ndArray = build4dArray();

          bool actual =
              const DeepCollectionEquality().equals(ndArray.data, testList4d);

          expect(actual, true);
        },
      );

      test(
        "fromList constructor 4d",
        () {
          final NdArray ndArray = NdArray.fromList(testList4d);

          bool actual =
              const DeepCollectionEquality().equals(ndArray.data, testList4d);

          expect(actual, true);
        },
      );

      test(
        "Standard constructor 12d",
        () {
          final NdArray ndArray = build12dArray();

          bool actual =
              const DeepCollectionEquality().equals(ndArray.data, testList12d);

          expect(actual, true);
        },
      );

      test(
        "fromList constructor 12d",
        () {
          final NdArray ndArray = NdArray.fromList(testList12d);

          bool actual =
              const DeepCollectionEquality().equals(ndArray.data, testList12d);

          expect(actual, true);
        },
      );
    },
  );

  group(
    "Coordinate calibration",
    () {
      test(
        "Making sure everything is where it is supposed to be - 1d",
        () {
          final NdArray ndArray = NdArray.fromList(testList1d);

          expect(ndArray[0], 1);
          expect(ndArray[1], 2);
          expect(ndArray[2], 3);
          expect(ndArray[3], 4);
        },
      );

      test(
        "Making sure everything is where it is supposed to be - 2d",
        () {
          final NdArray ndArray = NdArray.fromList(testList2d);

          expect(ndArray[0][0], 1);
          expect(ndArray[0][1], 2);
          expect(ndArray[1][0], 3);
          expect(ndArray[1][1], 4);
        },
      );

      test(
        "Making sure everything is where it is supposed to be - 3d",
        () {
          final NdArray ndArray = NdArray.fromList(testList3d);

          expect(ndArray[0][0][0], 1);
          expect(ndArray[0][0][1], 2);
          expect(ndArray[0][1][0], 3);
          expect(ndArray[0][1][1], 4);
          expect(ndArray[1][0][0], 5);
          expect(ndArray[1][0][1], 6);
          expect(ndArray[1][1][0], 7);
          expect(ndArray[1][1][1], 8);
        },
      );

      test(
        "Making sure everything is where it is supposed to be - 4d",
        () {
          final NdArray ndArray = NdArray.fromList(testList4d);

          expect(ndArray[0][0][0][0], 1);
          expect(ndArray[0][0][0][1], 2);
          expect(ndArray[0][0][1][0], 3);
          expect(ndArray[0][0][1][1], 4);
          expect(ndArray[0][1][0][0], 4);
          expect(ndArray[0][1][0][1], 3);
          expect(ndArray[0][1][1][0], 2);
          expect(ndArray[0][1][1][1], 1);
          expect(ndArray[1][0][0][0], 5);
          expect(ndArray[1][0][0][1], 6);
          expect(ndArray[1][0][1][0], 7);
          expect(ndArray[1][0][1][1], 8);
          expect(ndArray[1][1][0][0], 8);
          expect(ndArray[1][1][0][1], 7);
          expect(ndArray[1][1][1][0], 6);
          expect(ndArray[1][1][1][1], 5);
          expect(ndArray[2][0][0][0], 9);
          expect(ndArray[2][0][0][1], 10);
          expect(ndArray[2][0][1][0], 11);
          expect(ndArray[2][0][1][1], 12);
          expect(ndArray[2][1][0][0], 12);
          expect(ndArray[2][1][0][1], 11);
          expect(ndArray[2][1][1][0], 10);
          expect(ndArray[2][1][1][1], 9);
          expect(ndArray[3][0][0][0], 13);
          expect(ndArray[3][0][0][1], 14);
          expect(ndArray[3][0][1][0], 15);
          expect(ndArray[3][0][1][1], 16);
          expect(ndArray[3][1][0][0], 16);
          expect(ndArray[3][1][0][1], 15);
          expect(ndArray[3][1][1][0], 14);
          expect(ndArray[3][1][1][1], 13);
        },
      );

      test(
        "Making sure everything is where it is supposed to be - 12d",
        () {
          final NdArray ndArray = NdArray.fromList(testList12d);

          expect(ndArray[0][0][0][0][0][0][0][0][0][0][0][0], 1);
          expect(ndArray[0][0][0][0][0][0][0][0][0][0][0][1], 2);
          expect(ndArray[0][0][0][0][0][0][0][0][0][0][0][2], 3);
          expect(ndArray[0][0][0][0][0][0][0][0][0][0][1][0], "a");
          expect(ndArray[0][0][0][0][0][0][0][0][0][0][1][1], "b");
          expect(ndArray[0][0][0][0][0][0][0][0][0][0][1][2], "c");
          expect(ndArray[0][0][0][0][0][0][0][0][1][0][0][0], 4);
          expect(ndArray[0][0][0][0][0][0][0][0][1][0][0][1], 5);
          expect(ndArray[0][0][0][0][0][0][0][0][1][0][0][2], 6);
          expect(ndArray[0][0][0][0][0][0][0][0][1][0][1][0], "d");
          expect(ndArray[0][0][0][0][0][0][0][0][1][0][1][1], "e");
          expect(ndArray[0][0][0][0][0][0][0][0][1][0][1][2], "f");
          expect(ndArray[0][0][0][0][0][0][0][1][0][0][0][0], 7);
          expect(ndArray[0][0][0][0][0][0][0][1][0][0][0][1], 8);
          expect(ndArray[0][0][0][0][0][0][0][1][0][0][0][2], 9);
          expect(ndArray[0][0][0][0][0][0][0][1][0][0][1][0], "g");
          expect(ndArray[0][0][0][0][0][0][0][1][0][0][1][1], "h");
          expect(ndArray[0][0][0][0][0][0][0][1][0][0][1][2], "i");
          expect(ndArray[0][0][0][0][0][0][0][1][1][0][0][0], 10);
          expect(ndArray[0][0][0][0][0][0][0][1][1][0][0][1], 11);
          expect(ndArray[0][0][0][0][0][0][0][1][1][0][0][2], 12);
          expect(ndArray[0][0][0][0][0][0][0][1][1][0][1][0], "j");
          expect(ndArray[0][0][0][0][0][0][0][1][1][0][1][1], "k");
          expect(ndArray[0][0][0][0][0][0][0][1][1][0][1][2], "l");
          expect(ndArray[0][0][0][0][0][0][0][2][0][0][0][0], 13);
          expect(ndArray[0][0][0][0][0][0][0][2][0][0][0][1], 14);
          expect(ndArray[0][0][0][0][0][0][0][2][0][0][0][2], 15);
          expect(ndArray[0][0][0][0][0][0][0][2][0][0][1][0], "m");
          expect(ndArray[0][0][0][0][0][0][0][2][0][0][1][1], "n");
          expect(ndArray[0][0][0][0][0][0][0][2][0][0][1][2], "o");
          expect(ndArray[0][0][0][0][0][0][0][2][1][0][0][0], 16);
          expect(ndArray[0][0][0][0][0][0][0][2][1][0][0][1], 17);
          expect(ndArray[0][0][0][0][0][0][0][2][1][0][0][2], 18);
          expect(ndArray[0][0][0][0][0][0][0][2][1][0][1][0], "p");
          expect(ndArray[0][0][0][0][0][0][0][2][1][0][1][1], "q");
          expect(ndArray[0][0][0][0][0][0][0][2][1][0][1][2], "r");
          expect(ndArray[0][0][0][0][0][0][1][0][0][0][0][0], 19);
          expect(ndArray[0][0][0][0][0][0][1][0][0][0][0][1], 20);
          expect(ndArray[0][0][0][0][0][0][1][0][0][0][0][2], 21);
          expect(ndArray[0][0][0][0][0][0][1][0][0][0][1][0], "s");
          expect(ndArray[0][0][0][0][0][0][1][0][0][0][1][1], "t");
          expect(ndArray[0][0][0][0][0][0][1][0][0][0][1][2], "u");
          expect(ndArray[0][0][0][0][0][0][1][0][1][0][0][0], 22);
          expect(ndArray[0][0][0][0][0][0][1][0][1][0][0][1], 23);
          expect(ndArray[0][0][0][0][0][0][1][0][1][0][0][2], 24);
          expect(ndArray[0][0][0][0][0][0][1][0][1][0][1][0], "v");
          expect(ndArray[0][0][0][0][0][0][1][0][1][0][1][1], "w");
          expect(ndArray[0][0][0][0][0][0][1][0][1][0][1][2], "x");
          expect(ndArray[0][0][0][0][0][0][1][1][0][0][0][0], 25);
          expect(ndArray[0][0][0][0][0][0][1][1][0][0][0][1], 26);
          expect(ndArray[0][0][0][0][0][0][1][1][0][0][0][2], 27);
          expect(ndArray[0][0][0][0][0][0][1][1][0][0][1][0], "y");
          expect(ndArray[0][0][0][0][0][0][1][1][0][0][1][1], "z");
          expect(ndArray[0][0][0][0][0][0][1][1][0][0][1][2], "aa");
          expect(ndArray[0][0][0][0][0][0][1][1][1][0][0][0], 28);
          expect(ndArray[0][0][0][0][0][0][1][1][1][0][0][1], 29);
          expect(ndArray[0][0][0][0][0][0][1][1][1][0][0][2], 30);
          expect(ndArray[0][0][0][0][0][0][1][1][1][0][1][0], "ab");
          expect(ndArray[0][0][0][0][0][0][1][1][1][0][1][1], "ac");
          expect(ndArray[0][0][0][0][0][0][1][1][1][0][1][2], "ad");
          expect(ndArray[0][0][0][0][0][0][1][2][0][0][0][0], 31);
          expect(ndArray[0][0][0][0][0][0][1][2][0][0][0][1], 32);
          expect(ndArray[0][0][0][0][0][0][1][2][0][0][0][2], 33);
          expect(ndArray[0][0][0][0][0][0][1][2][0][0][1][0], "ae");
          expect(ndArray[0][0][0][0][0][0][1][2][0][0][1][1], "af");
          expect(ndArray[0][0][0][0][0][0][1][2][0][0][1][2], "ag");
          expect(ndArray[0][0][0][0][0][0][1][2][1][0][0][0], 34);
          expect(ndArray[0][0][0][0][0][0][1][2][1][0][0][1], 35);
          expect(ndArray[0][0][0][0][0][0][1][2][1][0][0][2], 36);
          expect(ndArray[0][0][0][0][0][0][1][2][1][0][1][0], "ah");
          expect(ndArray[0][0][0][0][0][0][1][2][1][0][1][1], "ai");
          expect(ndArray[0][0][0][0][0][0][1][2][1][0][1][2], "aj");
          expect(ndArray[0][0][0][0][0][1][0][0][0][0][0][0], 37);
          expect(ndArray[0][0][0][0][0][1][0][0][0][0][0][1], 38);
          expect(ndArray[0][0][0][0][0][1][0][0][0][0][0][2], 39);
          expect(ndArray[0][0][0][0][0][1][0][0][0][0][1][0], "ak");
          expect(ndArray[0][0][0][0][0][1][0][0][0][0][1][1], "al");
          expect(ndArray[0][0][0][0][0][1][0][0][0][0][1][2], "am");
          expect(ndArray[0][0][0][0][0][1][0][0][1][0][0][0], 40);
          expect(ndArray[0][0][0][0][0][1][0][0][1][0][0][1], 41);
          expect(ndArray[0][0][0][0][0][1][0][0][1][0][0][2], 42);
          expect(ndArray[0][0][0][0][0][1][0][0][1][0][1][0], "an");
          expect(ndArray[0][0][0][0][0][1][0][0][1][0][1][1], "ao");
          expect(ndArray[0][0][0][0][0][1][0][0][1][0][1][2], "ap");
          expect(ndArray[0][0][0][0][0][1][0][1][0][0][0][0], 43);
          expect(ndArray[0][0][0][0][0][1][0][1][0][0][0][1], 44);
          expect(ndArray[0][0][0][0][0][1][0][1][0][0][0][2], 45);
          expect(ndArray[0][0][0][0][0][1][0][1][0][0][1][0], "aq");
          expect(ndArray[0][0][0][0][0][1][0][1][0][0][1][1], "ar");
          expect(ndArray[0][0][0][0][0][1][0][1][0][0][1][2], "as");
          expect(ndArray[0][0][0][0][0][1][0][1][1][0][0][0], 46);
          expect(ndArray[0][0][0][0][0][1][0][1][1][0][0][1], 47);
          expect(ndArray[0][0][0][0][0][1][0][1][1][0][0][2], 48);
          expect(ndArray[0][0][0][0][0][1][0][1][1][0][1][0], "at");
          expect(ndArray[0][0][0][0][0][1][0][1][1][0][1][1], "au");
          expect(ndArray[0][0][0][0][0][1][0][1][1][0][1][2], "av");
          expect(ndArray[0][0][0][0][0][1][0][2][0][0][0][0], 49);
          expect(ndArray[0][0][0][0][0][1][0][2][0][0][0][1], 50);
          expect(ndArray[0][0][0][0][0][1][0][2][0][0][0][2], 51);
          expect(ndArray[0][0][0][0][0][1][0][2][0][0][1][0], "aw");
          expect(ndArray[0][0][0][0][0][1][0][2][0][0][1][1], "ax");
          expect(ndArray[0][0][0][0][0][1][0][2][0][0][1][2], "ay");
          expect(ndArray[0][0][0][0][0][1][0][2][1][0][0][0], 52);
          expect(ndArray[0][0][0][0][0][1][0][2][1][0][0][1], 53);
          expect(ndArray[0][0][0][0][0][1][0][2][1][0][0][2], 54);
          expect(ndArray[0][0][0][0][0][1][0][2][1][0][1][0], "az");
          expect(ndArray[0][0][0][0][0][1][0][2][1][0][1][1], "ba");
          expect(ndArray[0][0][0][0][0][1][0][2][1][0][1][2], "bb");
          expect(ndArray[0][0][0][0][0][1][1][0][0][0][0][0], 55);
          expect(ndArray[0][0][0][0][0][1][1][0][0][0][0][1], 56);
          expect(ndArray[0][0][0][0][0][1][1][0][0][0][0][2], 57);
          expect(ndArray[0][0][0][0][0][1][1][0][0][0][1][0], "bc");
          expect(ndArray[0][0][0][0][0][1][1][0][0][0][1][1], "bd");
          expect(ndArray[0][0][0][0][0][1][1][0][0][0][1][2], "be");
          expect(ndArray[0][0][0][0][0][1][1][0][1][0][0][0], 58);
          expect(ndArray[0][0][0][0][0][1][1][0][1][0][0][1], 59);
          expect(ndArray[0][0][0][0][0][1][1][0][1][0][0][2], 60);
          expect(ndArray[0][0][0][0][0][1][1][0][1][0][1][0], "bf");
          expect(ndArray[0][0][0][0][0][1][1][0][1][0][1][1], "bg");
          expect(ndArray[0][0][0][0][0][1][1][0][1][0][1][2], "bh");
          expect(ndArray[0][0][0][0][0][1][1][1][0][0][0][0], 61);
          expect(ndArray[0][0][0][0][0][1][1][1][0][0][0][1], 62);
          expect(ndArray[0][0][0][0][0][1][1][1][0][0][0][2], 63);
          expect(ndArray[0][0][0][0][0][1][1][1][0][0][1][0], "bi");
          expect(ndArray[0][0][0][0][0][1][1][1][0][0][1][1], "bj");
          expect(ndArray[0][0][0][0][0][1][1][1][0][0][1][2], "bk");
          expect(ndArray[0][0][0][0][0][1][1][1][1][0][0][0], 64);
          expect(ndArray[0][0][0][0][0][1][1][1][1][0][0][1], 65);
          expect(ndArray[0][0][0][0][0][1][1][1][1][0][0][2], 66);
          expect(ndArray[0][0][0][0][0][1][1][1][1][0][1][0], "bl");
          expect(ndArray[0][0][0][0][0][1][1][1][1][0][1][1], "bm");
          expect(ndArray[0][0][0][0][0][1][1][1][1][0][1][2], "bn");
          expect(ndArray[0][0][0][0][0][1][1][2][0][0][0][0], 67);
          expect(ndArray[0][0][0][0][0][1][1][2][0][0][0][1], 68);
          expect(ndArray[0][0][0][0][0][1][1][2][0][0][0][2], 69);
          expect(ndArray[0][0][0][0][0][1][1][2][0][0][1][0], "bo");
          expect(ndArray[0][0][0][0][0][1][1][2][0][0][1][1], "bp");
          expect(ndArray[0][0][0][0][0][1][1][2][0][0][1][2], "bq");
          expect(ndArray[0][0][0][0][0][1][1][2][1][0][0][0], 70);
          expect(ndArray[0][0][0][0][0][1][1][2][1][0][0][1], 71);
          expect(ndArray[0][0][0][0][0][1][1][2][1][0][0][2], 72);
          expect(ndArray[0][0][0][0][0][1][1][2][1][0][1][0], "br");
          expect(ndArray[0][0][0][0][0][1][1][2][1][0][1][1], "bs");
          expect(ndArray[0][0][0][0][0][1][1][2][1][0][1][2], "bt");
          expect(ndArray[0][0][0][0][1][0][0][0][0][0][0][0], 73);
          expect(ndArray[0][0][0][0][1][0][0][0][0][0][0][1], 74);
          expect(ndArray[0][0][0][0][1][0][0][0][0][0][0][2], 75);
          expect(ndArray[0][0][0][0][1][0][0][0][0][0][1][0], "bu");
          expect(ndArray[0][0][0][0][1][0][0][0][0][0][1][1], "bv");
          expect(ndArray[0][0][0][0][1][0][0][0][0][0][1][2], "bw");
          expect(ndArray[0][0][0][0][1][0][0][0][1][0][0][0], 76);
          expect(ndArray[0][0][0][0][1][0][0][0][1][0][0][1], 77);
          expect(ndArray[0][0][0][0][1][0][0][0][1][0][0][2], 78);
          expect(ndArray[0][0][0][0][1][0][0][0][1][0][1][0], "bx");
          expect(ndArray[0][0][0][0][1][0][0][0][1][0][1][1], "by");
          expect(ndArray[0][0][0][0][1][0][0][0][1][0][1][2], "bz");
          expect(ndArray[0][0][0][0][1][0][0][1][0][0][0][0], 79);
          expect(ndArray[0][0][0][0][1][0][0][1][0][0][0][1], 80);
          expect(ndArray[0][0][0][0][1][0][0][1][0][0][0][2], 81);
          expect(ndArray[0][0][0][0][1][0][0][1][0][0][1][0], "ca");
          expect(ndArray[0][0][0][0][1][0][0][1][0][0][1][1], "cb");
          expect(ndArray[0][0][0][0][1][0][0][1][0][0][1][2], "cc");
          expect(ndArray[0][0][0][0][1][0][0][1][1][0][0][0], 82);
          expect(ndArray[0][0][0][0][1][0][0][1][1][0][0][1], 83);
          expect(ndArray[0][0][0][0][1][0][0][1][1][0][0][2], 84);
          expect(ndArray[0][0][0][0][1][0][0][1][1][0][1][0], "cd");
          expect(ndArray[0][0][0][0][1][0][0][1][1][0][1][1], "ce");
          expect(ndArray[0][0][0][0][1][0][0][1][1][0][1][2], "cf");
          expect(ndArray[0][0][0][0][1][0][0][2][0][0][0][0], 85);
          expect(ndArray[0][0][0][0][1][0][0][2][0][0][0][1], 86);
          expect(ndArray[0][0][0][0][1][0][0][2][0][0][0][2], 87);
          expect(ndArray[0][0][0][0][1][0][0][2][0][0][1][0], "cg");
          expect(ndArray[0][0][0][0][1][0][0][2][0][0][1][1], "ch");
          expect(ndArray[0][0][0][0][1][0][0][2][0][0][1][2], "ci");
          expect(ndArray[0][0][0][0][1][0][0][2][1][0][0][0], 88);
          expect(ndArray[0][0][0][0][1][0][0][2][1][0][0][1], 89);
          expect(ndArray[0][0][0][0][1][0][0][2][1][0][0][2], 90);
          expect(ndArray[0][0][0][0][1][0][0][2][1][0][1][0], "cj");
          expect(ndArray[0][0][0][0][1][0][0][2][1][0][1][1], "ck");
          expect(ndArray[0][0][0][0][1][0][0][2][1][0][1][2], "cl");
          expect(ndArray[0][0][0][0][1][0][1][0][0][0][0][0], 91);
          expect(ndArray[0][0][0][0][1][0][1][0][0][0][0][1], 92);
          expect(ndArray[0][0][0][0][1][0][1][0][0][0][0][2], 93);
          expect(ndArray[0][0][0][0][1][0][1][0][0][0][1][0], "cm");
          expect(ndArray[0][0][0][0][1][0][1][0][0][0][1][1], "cn");
          expect(ndArray[0][0][0][0][1][0][1][0][0][0][1][2], "co");
          expect(ndArray[0][0][0][0][1][0][1][0][1][0][0][0], 95);
          expect(ndArray[0][0][0][0][1][0][1][0][1][0][0][1], 95);
          expect(ndArray[0][0][0][0][1][0][1][0][1][0][0][2], 96);
          expect(ndArray[0][0][0][0][1][0][1][0][1][0][1][0], "cp");
          expect(ndArray[0][0][0][0][1][0][1][0][1][0][1][1], "cq");
          expect(ndArray[0][0][0][0][1][0][1][0][1][0][1][2], "cr");
          expect(ndArray[0][0][0][0][1][0][1][1][0][0][0][0], 97);
          expect(ndArray[0][0][0][0][1][0][1][1][0][0][0][1], 98);
          expect(ndArray[0][0][0][0][1][0][1][1][0][0][0][2], 99);
          expect(ndArray[0][0][0][0][1][0][1][1][0][0][1][0], "cs");
          expect(ndArray[0][0][0][0][1][0][1][1][0][0][1][1], "ct");
          expect(ndArray[0][0][0][0][1][0][1][1][0][0][1][2], "cu");
          expect(ndArray[0][0][0][0][1][0][1][1][1][0][0][0], 100);
          expect(ndArray[0][0][0][0][1][0][1][1][1][0][0][1], 101);
          expect(ndArray[0][0][0][0][1][0][1][1][1][0][0][2], 102);
          expect(ndArray[0][0][0][0][1][0][1][1][1][0][1][0], "cv");
          expect(ndArray[0][0][0][0][1][0][1][1][1][0][1][1], "cw");
          expect(ndArray[0][0][0][0][1][0][1][1][1][0][1][2], "cx");
          expect(ndArray[0][0][0][0][1][0][1][2][0][0][0][0], 103);
          expect(ndArray[0][0][0][0][1][0][1][2][0][0][0][1], 104);
          expect(ndArray[0][0][0][0][1][0][1][2][0][0][0][2], 105);
          expect(ndArray[0][0][0][0][1][0][1][2][0][0][1][0], "cy");
          expect(ndArray[0][0][0][0][1][0][1][2][0][0][1][1], "cz");
          expect(ndArray[0][0][0][0][1][0][1][2][0][0][1][2], "da");
          expect(ndArray[0][0][0][0][1][0][1][2][1][0][0][0], 106);
          expect(ndArray[0][0][0][0][1][0][1][2][1][0][0][1], 107);
          expect(ndArray[0][0][0][0][1][0][1][2][1][0][0][2], 108);
          expect(ndArray[0][0][0][0][1][0][1][2][1][0][1][0], "db");
          expect(ndArray[0][0][0][0][1][0][1][2][1][0][1][1], "dc");
          expect(ndArray[0][0][0][0][1][0][1][2][1][0][1][2], "dd");
          expect(ndArray[0][0][0][0][1][1][0][0][0][0][0][0], 109);
          expect(ndArray[0][0][0][0][1][1][0][0][0][0][0][1], 110);
          expect(ndArray[0][0][0][0][1][1][0][0][0][0][0][2], 111);
          expect(ndArray[0][0][0][0][1][1][0][0][0][0][1][0], "de");
          expect(ndArray[0][0][0][0][1][1][0][0][0][0][1][1], "df");
          expect(ndArray[0][0][0][0][1][1][0][0][0][0][1][2], "dg");
          expect(ndArray[0][0][0][0][1][1][0][0][1][0][0][0], 112);
          expect(ndArray[0][0][0][0][1][1][0][0][1][0][0][1], 113);
          expect(ndArray[0][0][0][0][1][1][0][0][1][0][0][2], 114);
          expect(ndArray[0][0][0][0][1][1][0][0][1][0][1][0], "dh");
          expect(ndArray[0][0][0][0][1][1][0][0][1][0][1][1], "di");
          expect(ndArray[0][0][0][0][1][1][0][0][1][0][1][2], "dj");
          expect(ndArray[0][0][0][0][1][1][0][1][0][0][0][0], 115);
          expect(ndArray[0][0][0][0][1][1][0][1][0][0][0][1], 116);
          expect(ndArray[0][0][0][0][1][1][0][1][0][0][0][2], 117);
          expect(ndArray[0][0][0][0][1][1][0][1][0][0][1][0], "dk");
          expect(ndArray[0][0][0][0][1][1][0][1][0][0][1][1], "dl");
          expect(ndArray[0][0][0][0][1][1][0][1][0][0][1][2], "dm");
          expect(ndArray[0][0][0][0][1][1][0][1][1][0][0][0], 118);
          expect(ndArray[0][0][0][0][1][1][0][1][1][0][0][1], 119);
          expect(ndArray[0][0][0][0][1][1][0][1][1][0][0][2], 120);
          expect(ndArray[0][0][0][0][1][1][0][1][1][0][1][0], "dn");
          expect(ndArray[0][0][0][0][1][1][0][1][1][0][1][1], "do");
          expect(ndArray[0][0][0][0][1][1][0][1][1][0][1][2], "dp");
          expect(ndArray[0][0][0][0][1][1][0][2][0][0][0][0], 121);
          expect(ndArray[0][0][0][0][1][1][0][2][0][0][0][1], 122);
          expect(ndArray[0][0][0][0][1][1][0][2][0][0][0][2], 123);
          expect(ndArray[0][0][0][0][1][1][0][2][0][0][1][0], "dq");
          expect(ndArray[0][0][0][0][1][1][0][2][0][0][1][1], "dr");
          expect(ndArray[0][0][0][0][1][1][0][2][0][0][1][2], "ds");
          expect(ndArray[0][0][0][0][1][1][0][2][1][0][0][0], 124);
          expect(ndArray[0][0][0][0][1][1][0][2][1][0][0][1], 125);
          expect(ndArray[0][0][0][0][1][1][0][2][1][0][0][2], 126);
          expect(ndArray[0][0][0][0][1][1][0][2][1][0][1][0], "dt");
          expect(ndArray[0][0][0][0][1][1][0][2][1][0][1][1], "du");
          expect(ndArray[0][0][0][0][1][1][0][2][1][0][1][2], "dv");
          expect(ndArray[0][0][0][0][1][1][1][0][0][0][0][0], 127);
          expect(ndArray[0][0][0][0][1][1][1][0][0][0][0][1], 128);
          expect(ndArray[0][0][0][0][1][1][1][0][0][0][0][2], 129);
          expect(ndArray[0][0][0][0][1][1][1][0][0][0][1][0], "dw");
          expect(ndArray[0][0][0][0][1][1][1][0][0][0][1][1], "dx");
          expect(ndArray[0][0][0][0][1][1][1][0][0][0][1][2], "dy");
          expect(ndArray[0][0][0][0][1][1][1][0][1][0][0][0], 130);
          expect(ndArray[0][0][0][0][1][1][1][0][1][0][0][1], 131);
          expect(ndArray[0][0][0][0][1][1][1][0][1][0][0][2], 132);
          expect(ndArray[0][0][0][0][1][1][1][0][1][0][1][0], "dz");
          expect(ndArray[0][0][0][0][1][1][1][0][1][0][1][1], "ea");
          expect(ndArray[0][0][0][0][1][1][1][0][1][0][1][2], "eb");
          expect(ndArray[0][0][0][0][1][1][1][1][0][0][0][0], 133);
          expect(ndArray[0][0][0][0][1][1][1][1][0][0][0][1], 134);
          expect(ndArray[0][0][0][0][1][1][1][1][0][0][0][2], 135);
          expect(ndArray[0][0][0][0][1][1][1][1][0][0][1][0], "ec");
          expect(ndArray[0][0][0][0][1][1][1][1][0][0][1][1], "ed");
          expect(ndArray[0][0][0][0][1][1][1][1][0][0][1][2], "ee");
          expect(ndArray[0][0][0][0][1][1][1][1][1][0][0][0], 136);
          expect(ndArray[0][0][0][0][1][1][1][1][1][0][0][1], 137);
          expect(ndArray[0][0][0][0][1][1][1][1][1][0][0][2], 138);
          expect(ndArray[0][0][0][0][1][1][1][1][1][0][1][0], "ef");
          expect(ndArray[0][0][0][0][1][1][1][1][1][0][1][1], "eg");
          expect(ndArray[0][0][0][0][1][1][1][1][1][0][1][2], "eh");
          expect(ndArray[0][0][0][0][1][1][1][2][0][0][0][0], 139);
          expect(ndArray[0][0][0][0][1][1][1][2][0][0][0][1], 140);
          expect(ndArray[0][0][0][0][1][1][1][2][0][0][0][2], 141);
          expect(ndArray[0][0][0][0][1][1][1][2][0][0][1][0], "ei");
          expect(ndArray[0][0][0][0][1][1][1][2][0][0][1][1], "ej");
          expect(ndArray[0][0][0][0][1][1][1][2][0][0][1][2], "ek");
          expect(ndArray[0][0][0][0][1][1][1][2][1][0][0][0], 142);
          expect(ndArray[0][0][0][0][1][1][1][2][1][0][0][1], 143);
          expect(ndArray[0][0][0][0][1][1][1][2][1][0][0][2], 144);
          expect(ndArray[0][0][0][0][1][1][1][2][1][0][1][0], "el");
          expect(ndArray[0][0][0][0][1][1][1][2][1][0][1][1], "em");
          expect(ndArray[0][0][0][0][1][1][1][2][1][0][1][2], "en");
          expect(ndArray[0][0][1][0][0][0][0][0][0][0][0][0], 6523);
          expect(ndArray[0][0][1][0][0][0][0][0][0][0][0][1], 65);
          expect(ndArray[0][0][1][0][0][0][0][0][0][0][0][2], 143);
          expect(ndArray[0][0][1][0][0][0][0][0][0][0][1][0], "hjkDhg");
          expect(ndArray[0][0][1][0][0][0][0][0][0][0][1][1], "ghg4hb");
          expect(ndArray[0][0][1][0][0][0][0][0][0][0][1][2], "gui6r7");
          expect(ndArray[0][0][1][0][0][0][0][0][1][0][0][0], 563);
          expect(ndArray[0][0][1][0][0][0][0][0][1][0][0][1], 73);
          expect(ndArray[0][0][1][0][0][0][0][0][1][0][0][2], 537);
          expect(ndArray[0][0][1][0][0][0][0][0][1][0][1][0], "bsd6f546");
          expect(ndArray[0][0][1][0][0][0][0][0][1][0][1][1], "DF^YH");
          expect(ndArray[0][0][1][0][0][0][0][0][1][0][1][2], "fddDfa");
          expect(ndArray[0][0][1][0][0][0][0][1][0][0][0][0], 735);
          expect(ndArray[0][0][1][0][0][0][0][1][0][0][0][1], 573);
          expect(ndArray[0][0][1][0][0][0][0][1][0][0][0][2], 753);
          expect(ndArray[0][0][1][0][0][0][0][1][0][0][1][0], "g");
          expect(ndArray[0][0][1][0][0][0][0][1][0][0][1][1], "h");
          expect(ndArray[0][0][1][0][0][0][0][1][0][0][1][2], "i");
          expect(ndArray[0][0][1][0][0][0][0][1][1][0][0][0], 45677);
          expect(ndArray[0][0][1][0][0][0][0][1][1][0][0][1], 98);
          expect(ndArray[0][0][1][0][0][0][0][1][1][0][0][2], 16572);
          expect(ndArray[0][0][1][0][0][0][0][1][1][0][1][0], "j");
          expect(ndArray[0][0][1][0][0][0][0][1][1][0][1][1], "k");
          expect(ndArray[0][0][1][0][0][0][0][1][1][0][1][2], "l");
          expect(ndArray[0][0][1][0][0][0][0][2][0][0][0][0], 1356);
          expect(ndArray[0][0][1][0][0][0][0][2][0][0][0][1], 24);
          expect(ndArray[0][0][1][0][0][0][0][2][0][0][0][2], 5715);
          expect(ndArray[0][0][1][0][0][0][0][2][0][0][1][0], "asDdDdGfm");
          expect(ndArray[0][0][1][0][0][0][0][2][0][0][1][1], "ndfSdf");
          expect(ndArray[0][0][1][0][0][0][0][2][0][0][1][2], "oDFD");
          expect(ndArray[0][0][1][0][0][0][0][2][1][0][0][0], 54673);
          expect(ndArray[0][0][1][0][0][0][0][2][1][0][0][1], 3456);
          expect(ndArray[0][0][1][0][0][0][0][2][1][0][0][2], 55);
          expect(ndArray[0][0][1][0][0][0][0][2][1][0][1][0], "kDk fRjd");
          expect(ndArray[0][0][1][0][0][0][0][2][1][0][1][1], "q d");
          expect(ndArray[0][0][1][0][0][0][0][2][1][0][1][2], "rdgGfdDad");
          expect(ndArray[0][0][1][0][0][0][1][0][0][0][0][0], 56356);
          expect(ndArray[0][0][1][0][0][0][1][0][0][0][0][1], 55);
          expect(ndArray[0][0][1][0][0][0][1][0][0][0][0][2], 457);
          expect(ndArray[0][0][1][0][0][0][1][0][0][0][1][0], "sd");
          expect(ndArray[0][0][1][0][0][0][1][0][0][0][1][1], "te");
          expect(ndArray[0][0][1][0][0][0][1][0][0][0][1][2], "ude");
          expect(ndArray[0][0][1][0][0][0][1][0][1][0][0][0], 22);
          expect(ndArray[0][0][1][0][0][0][1][0][1][0][0][1], 23);
          expect(ndArray[0][0][1][0][0][0][1][0][1][0][0][2], 24);
          expect(ndArray[0][0][1][0][0][0][1][0][1][0][1][0], "vDdfFg");
          expect(ndArray[0][0][1][0][0][0][1][0][1][0][1][1], "wsd");
          expect(ndArray[0][0][1][0][0][0][1][0][1][0][1][2], "xfe");
          expect(ndArray[0][0][1][0][0][0][1][1][0][0][0][0], 1234);
          expect(ndArray[0][0][1][0][0][0][1][1][0][0][0][1], 52);
          expect(ndArray[0][0][1][0][0][0][1][1][0][0][0][2], 99705);
          expect(ndArray[0][0][1][0][0][0][1][1][0][0][1][0], "yDFfGfZds");
          expect(ndArray[0][0][1][0][0][0][1][1][0][0][1][1], "zDFe");
          expect(ndArray[0][0][1][0][0][0][1][1][0][0][1][2], "aa");
          expect(ndArray[0][0][1][0][0][0][1][1][1][0][0][0], 462);
          expect(ndArray[0][0][1][0][0][0][1][1][1][0][0][1], 727);
          expect(ndArray[0][0][1][0][0][0][1][1][1][0][0][2], 8382);
          expect(ndArray[0][0][1][0][0][0][1][1][1][0][1][0], "ab");
          expect(ndArray[0][0][1][0][0][0][1][1][1][0][1][1], "H");
          expect(ndArray[0][0][1][0][0][0][1][1][1][0][1][2], "ht");
          expect(ndArray[0][0][1][0][0][0][1][2][0][0][0][0], 563457);
          expect(ndArray[0][0][1][0][0][0][1][2][0][0][0][1], 24);
          expect(ndArray[0][0][1][0][0][0][1][2][0][0][0][2], 757247);
          expect(ndArray[0][0][1][0][0][0][1][2][0][0][1][0], "M");
          expect(ndArray[0][0][1][0][0][0][1][2][0][0][1][1], "M");
          expect(ndArray[0][0][1][0][0][0][1][2][0][0][1][2], "M");
          expect(ndArray[0][0][1][0][0][0][1][2][1][0][0][0], 6727);
          expect(ndArray[0][0][1][0][0][0][1][2][1][0][0][1], 3411);
          expect(ndArray[0][0][1][0][0][0][1][2][1][0][0][2], 3478900);
          expect(ndArray[0][0][1][0][0][0][1][2][1][0][1][0], "a5asd5ty");
          expect(ndArray[0][0][1][0][0][0][1][2][1][0][1][1], "ert7usj5");
          expect(ndArray[0][0][1][0][0][0][1][2][1][0][1][2], "dfrDn56");
          expect(ndArray[0][0][1][0][0][1][0][0][0][0][0][0], 5892);
          expect(ndArray[0][0][1][0][0][1][0][0][0][0][0][1], 2002);
          expect(ndArray[0][0][1][0][0][1][0][0][0][0][0][2], 1003367);
          expect(ndArray[0][0][1][0][0][1][0][0][0][0][1][0], "aBka0y4");
          expect(ndArray[0][0][1][0][0][1][0][0][0][0][1][1], "a5l");
          expect(ndArray[0][0][1][0][0][1][0][0][0][0][1][2], "am");
          expect(ndArray[0][0][1][0][0][1][0][0][1][0][0][0], 452728);
          expect(ndArray[0][0][1][0][0][1][0][0][1][0][0][1], 66);
          expect(ndArray[0][0][1][0][0][1][0][0][1][0][0][2], 84838);
          expect(ndArray[0][0][1][0][0][1][0][0][1][0][1][0], "df  an");
          expect(ndArray[0][0][1][0][0][1][0][0][1][0][1][1], "HR r g v d");
          expect(ndArray[0][0][1][0][0][1][0][0][1][0][1][2], "adfFDp");
          expect(ndArray[0][0][1][0][0][1][0][1][0][0][0][0], 58383);
          expect(ndArray[0][0][1][0][0][1][0][1][0][0][0][1], 2244);
          expect(ndArray[0][0][1][0][0][1][0][1][0][0][0][2], 55);
          expect(ndArray[0][0][1][0][0][1][0][1][0][0][1][0], "asq");
          expect(ndArray[0][0][1][0][0][1][0][1][0][0][1][1], "a4r");
          expect(ndArray[0][0][1][0][0][1][0][1][0][0][1][2], "ah5s");
          expect(ndArray[0][0][1][0][0][1][0][1][1][0][0][0], 1);
          expect(ndArray[0][0][1][0][0][1][0][1][1][0][0][1], 922458);
          expect(ndArray[0][0][1][0][0][1][0][1][1][0][0][2], 65004);
          expect(ndArray[0][0][1][0][0][1][0][1][1][0][1][0], "a4z6t");
          expect(ndArray[0][0][1][0][0][1][0][1][1][0][1][1], "a4nau");
          expect(ndArray[0][0][1][0][0][1][0][1][1][0][1][2], "n4at");
          expect(ndArray[0][0][1][0][0][1][0][2][0][0][0][0], 30038);
          expect(ndArray[0][0][1][0][0][1][0][2][0][0][0][1], 151);
          expect(ndArray[0][0][1][0][0][1][0][2][0][0][0][2], -9);
          expect(ndArray[0][0][1][0][0][1][0][2][0][0][1][0], "zn46564n4");
          expect(ndArray[0][0][1][0][0][1][0][2][0][0][1][1], "asd5a5");
          expect(ndArray[0][0][1][0][0][1][0][2][0][0][1][2], " ver  w ");
          expect(ndArray[0][0][1][0][0][1][0][2][1][0][0][0], 2345267);
          expect(ndArray[0][0][1][0][0][1][0][2][1][0][0][1], 44);
          expect(ndArray[0][0][1][0][0][1][0][2][1][0][0][2], 11677);
          expect(ndArray[0][0][1][0][0][1][0][2][1][0][1][0], "aDE%^z");
          expect(ndArray[0][0][1][0][0][1][0][2][1][0][1][1], "D%N");
          expect(ndArray[0][0][1][0][0][1][0][2][1][0][1][2],
              "[0][0][1][0][0][1][0][2][1][0][1][2]");
          expect(ndArray[0][0][1][0][0][1][1][0][0][0][0][0], 4771);
          expect(ndArray[0][0][1][0][0][1][1][0][0][0][0][1], 557);
          expect(ndArray[0][0][1][0][0][1][1][0][0][0][0][2], 15 - 7);
          expect(ndArray[0][0][1][0][0][1][1][0][0][0][1][0], "s4");
          expect(ndArray[0][0][1][0][0][1][1][0][0][0][1][1], "a");
          expect(ndArray[0][0][1][0][0][1][1][0][0][0][1][2], "b");
          expect(ndArray[0][0][1][0][0][1][1][0][1][0][0][0], 179356);
          expect(ndArray[0][0][1][0][0][1][1][0][1][0][0][1], 4476);
          expect(ndArray[0][0][1][0][0][1][1][0][1][0][0][2], 0);
          expect(ndArray[0][0][1][0][0][1][1][0][1][0][1][0], "c");
          expect(ndArray[0][0][1][0][0][1][1][0][1][0][1][1], "d");
          expect(ndArray[0][0][1][0][0][1][1][0][1][0][1][2], "e");
          expect(ndArray[0][0][1][0][0][1][1][1][0][0][0][0], 477);
          expect(ndArray[0][0][1][0][0][1][1][1][0][0][0][1], 6627);
          expect(ndArray[0][0][1][0][0][1][1][1][0][0][0][2], 44);
          expect(ndArray[0][0][1][0][0][1][1][1][0][0][1][0], "f");
          expect(ndArray[0][0][1][0][0][1][1][1][0][0][1][1], "g");
          expect(ndArray[0][0][1][0][0][1][1][1][0][0][1][2], "z");
          expect(ndArray[0][0][1][0][0][1][1][1][1][0][0][0], 45267);
          expect(ndArray[0][0][1][0][0][1][1][1][1][0][0][1], 756);
          expect(ndArray[0][0][1][0][0][1][1][1][1][0][0][2], 4472714);
          expect(ndArray[0][0][1][0][0][1][1][1][1][0][1][0], "y");
          expect(ndArray[0][0][1][0][0][1][1][1][1][0][1][1], "x");
          expect(ndArray[0][0][1][0][0][1][1][1][1][0][1][2], "w");
          expect(ndArray[0][0][1][0][0][1][1][2][0][0][0][0], 46727);
          expect(ndArray[0][0][1][0][0][1][1][2][0][0][0][1], 68);
          expect(ndArray[0][0][1][0][0][1][1][2][0][0][0][2], 457);
          expect(ndArray[0][0][1][0][0][1][1][2][0][0][1][0], "boo");
          expect(ndArray[0][0][1][0][0][1][1][2][0][0][1][1], "ae43");
          expect(ndArray[0][0][1][0][0][1][1][2][0][0][1][2], "asd fa sd4");
          expect(ndArray[0][0][1][0][0][1][1][2][1][0][0][0], 3);
          expect(ndArray[0][0][1][0][0][1][1][2][1][0][0][1], 6727);
          expect(ndArray[0][0][1][0][0][1][1][2][1][0][0][2], 5672);
          expect(ndArray[0][0][1][0][0][1][1][2][1][0][1][0], "bra sd");
          expect(ndArray[0][0][1][0][0][1][1][2][1][0][1][1],
              "k4789d3 klGud 83 s");
          expect(ndArray[0][0][1][0][0][1][1][2][1][0][1][2], "bt");
          expect(ndArray[0][0][1][0][1][0][0][0][0][0][0][0], 745);
          expect(ndArray[0][0][1][0][1][0][0][0][0][0][0][1], 5);
          expect(ndArray[0][0][1][0][1][0][0][0][0][0][0][2], 5);
          expect(ndArray[0][0][1][0][1][0][0][0][0][0][1][0], "df4h5 f");
          expect(ndArray[0][0][1][0][1][0][0][0][0][0][1][1], "d r443 s");
          expect(ndArray[0][0][1][0][1][0][0][0][0][0][1][2], "bw");
          expect(ndArray[0][0][1][0][1][0][0][0][1][0][0][0], 74);
          expect(ndArray[0][0][1][0][1][0][0][0][1][0][0][1], 74);
          expect(ndArray[0][0][1][0][1][0][0][0][1][0][0][2], 74);
          expect(ndArray[0][0][1][0][1][0][0][0][1][0][1][0], "bx");
          expect(ndArray[0][0][1][0][1][0][0][0][1][0][1][1], "sd 4 46");
          expect(ndArray[0][0][1][0][1][0][0][0][1][0][1][2], "bz");
          expect(ndArray[0][0][1][0][1][0][0][1][0][0][0][0], 74);
          expect(ndArray[0][0][1][0][1][0][0][1][0][0][0][1], 74);
          expect(ndArray[0][0][1][0][1][0][0][1][0][0][0][2], 74);
          expect(ndArray[0][0][1][0][1][0][0][1][0][0][1][0], "ca");
          expect(ndArray[0][0][1][0][1][0][0][1][0][0][1][1], "cb");
          expect(ndArray[0][0][1][0][1][0][0][1][0][0][1][2], "7hw46 ga def");
          expect(ndArray[0][0][1][0][1][0][0][1][1][0][0][0], 9823);
          expect(ndArray[0][0][1][0][1][0][0][1][1][0][0][1], 823822);
          expect(ndArray[0][0][1][0][1][0][0][1][1][0][0][2], 828);
          expect(ndArray[0][0][1][0][1][0][0][1][1][0][1][0], "cd");
          expect(ndArray[0][0][1][0][1][0][0][1][1][0][1][1], "a  t3 ds");
          expect(ndArray[0][0][1][0][1][0][0][1][1][0][1][2], "cf");
          expect(ndArray[0][0][1][0][1][0][0][2][0][0][0][0], 7345);
          expect(ndArray[0][0][1][0][1][0][0][2][0][0][0][1], 1345);
          expect(ndArray[0][0][1][0][1][0][0][2][0][0][0][2], 4145);
          expect(ndArray[0][0][1][0][1][0][0][2][0][0][1][0], "a45r sd");
          expect(ndArray[0][0][1][0][1][0][0][2][0][0][1][1], "d4frh");
          expect(ndArray[0][0][1][0][1][0][0][2][0][0][1][2],
              "asdf a4sdf 4asd6f d");
          expect(ndArray[0][0][1][0][1][0][0][2][1][0][0][0], 5789);
          expect(ndArray[0][0][1][0][1][0][0][2][1][0][0][1], 775);
          expect(ndArray[0][0][1][0][1][0][0][2][1][0][0][2], 789);
          expect(ndArray[0][0][1][0][1][0][0][2][1][0][1][0],
              "g>hkr    .r 35  4 5ht,,r.brt d");
          expect(ndArray[0][0][1][0][1][0][0][2][1][0][1][1], "f");
          expect(ndArray[0][0][1][0][1][0][0][2][1][0][1][2], "gs45");
          expect(ndArray[0][0][1][0][1][0][1][0][0][0][0][0], 7823);
          expect(ndArray[0][0][1][0][1][0][1][0][0][0][0][1], 92);
          expect(ndArray[0][0][1][0][1][0][1][0][0][0][0][2], 45672);
          expect(ndArray[0][0][1][0][1][0][1][0][0][0][1][0], "cm");
          expect(ndArray[0][0][1][0][1][0][1][0][0][0][1][1], "cn");
          expect(ndArray[0][0][1][0][1][0][1][0][0][0][1][2], "co");
          expect(ndArray[0][0][1][0][1][0][1][0][1][0][0][0], 95);
          expect(ndArray[0][0][1][0][1][0][1][0][1][0][0][1], 95);
          expect(ndArray[0][0][1][0][1][0][1][0][1][0][0][2], 96);
          expect(ndArray[0][0][1][0][1][0][1][0][1][0][1][0], "cp");
          expect(ndArray[0][0][1][0][1][0][1][0][1][0][1][1], "cq");
          expect(ndArray[0][0][1][0][1][0][1][0][1][0][1][2], "cr");
          expect(ndArray[0][0][1][0][1][0][1][1][0][0][0][0], 461);
          expect(ndArray[0][0][1][0][1][0][1][1][0][0][0][1], 98);
          expect(ndArray[0][0][1][0][1][0][1][1][0][0][0][2], 44);
          expect(ndArray[0][0][1][0][1][0][1][1][0][0][1][0], "cs");
          expect(ndArray[0][0][1][0][1][0][1][1][0][0][1][1], "ct");
          expect(ndArray[0][0][1][0][1][0][1][1][0][0][1][2], "cu");
          expect(ndArray[0][0][1][0][1][0][1][1][1][0][0][0], 111);
          expect(ndArray[0][0][1][0][1][0][1][1][1][0][0][1], 4564);
          expect(ndArray[0][0][1][0][1][0][1][1][1][0][0][2], 789);
          expect(ndArray[0][0][1][0][1][0][1][1][1][0][1][0], "cv");
          expect(ndArray[0][0][1][0][1][0][1][1][1][0][1][1], "cw");
          expect(ndArray[0][0][1][0][1][0][1][1][1][0][1][2], "cx");
          expect(ndArray[0][0][1][0][1][0][1][2][0][0][0][0], 88);
          expect(ndArray[0][0][1][0][1][0][1][2][0][0][0][1], 4564);
          expect(ndArray[0][0][1][0][1][0][1][2][0][0][0][2], 87789);
          expect(ndArray[0][0][1][0][1][0][1][2][0][0][1][0], "cy");
          expect(ndArray[0][0][1][0][1][0][1][2][0][0][1][1], "cz");
          expect(ndArray[0][0][1][0][1][0][1][2][0][0][1][2], "da");
          expect(ndArray[0][0][1][0][1][0][1][2][1][0][0][0], 17096);
          expect(ndArray[0][0][1][0][1][0][1][2][1][0][0][1], 107787);
          expect(ndArray[0][0][1][0][1][0][1][2][1][0][0][2], 1058);
          expect(ndArray[0][0][1][0][1][0][1][2][1][0][1][0], "db");
          expect(ndArray[0][0][1][0][1][0][1][2][1][0][1][1], "dc");
          expect(ndArray[0][0][1][0][1][0][1][2][1][0][1][2], "dd");
          expect(ndArray[0][0][1][0][1][1][0][0][0][0][0][0], 4527);
          expect(ndArray[0][0][1][0][1][1][0][0][0][0][0][1], 44);
          expect(ndArray[0][0][1][0][1][1][0][0][0][0][0][2], 775);
          expect(ndArray[0][0][1][0][1][1][0][0][0][0][1][0], "de");
          expect(ndArray[0][0][1][0][1][1][0][0][0][0][1][1], "df");
          expect(ndArray[0][0][1][0][1][1][0][0][0][0][1][2], "dg");
          expect(ndArray[0][0][1][0][1][1][0][0][1][0][0][0], 5821);
          expect(ndArray[0][0][1][0][1][1][0][0][1][0][0][1], 457);
          expect(ndArray[0][0][1][0][1][1][0][0][1][0][0][2], 42);
          expect(ndArray[0][0][1][0][1][1][0][0][1][0][1][0], "dh");
          expect(ndArray[0][0][1][0][1][1][0][0][1][0][1][1], "di");
          expect(ndArray[0][0][1][0][1][1][0][0][1][0][1][2], "dj");
          expect(ndArray[0][0][1][0][1][1][0][1][0][0][0][0], 79034);
          expect(ndArray[0][0][1][0][1][1][0][1][0][0][0][1], 2457098);
          expect(ndArray[0][0][1][0][1][1][0][1][0][0][0][2], 1000001);
          expect(ndArray[0][0][1][0][1][1][0][1][0][0][1][0], "dk");
          expect(ndArray[0][0][1][0][1][1][0][1][0][0][1][1], "dl");
          expect(ndArray[0][0][1][0][1][1][0][1][0][0][1][2], "dm");
          expect(ndArray[0][0][1][0][1][1][0][1][1][0][0][0], 468345);
          expect(ndArray[0][0][1][0][1][1][0][1][1][0][0][1], 23462);
          expect(ndArray[0][0][1][0][1][1][0][1][1][0][0][2], 678);
          expect(ndArray[0][0][1][0][1][1][0][1][1][0][1][0], "dn");
          expect(ndArray[0][0][1][0][1][1][0][1][1][0][1][1], "do");
          expect(ndArray[0][0][1][0][1][1][0][1][1][0][1][2], "dp");
          expect(ndArray[0][0][1][0][1][1][0][2][0][0][0][0], 12);
          expect(ndArray[0][0][1][0][1][1][0][2][0][0][0][1], 457);
          expect(ndArray[0][0][1][0][1][1][0][2][0][0][0][2], 12);
          expect(ndArray[0][0][1][0][1][1][0][2][0][0][1][0], "dq");
          expect(ndArray[0][0][1][0][1][1][0][2][0][0][1][1], "dr");
          expect(ndArray[0][0][1][0][1][1][0][2][0][0][1][2], "ds");
          expect(ndArray[0][0][1][0][1][1][0][2][1][0][0][0], 15);
          expect(ndArray[0][0][1][0][1][1][0][2][1][0][0][1], 150);
          expect(ndArray[0][0][1][0][1][1][0][2][1][0][0][2], 1500);
          expect(ndArray[0][0][1][0][1][1][0][2][1][0][1][0], "dt");
          expect(ndArray[0][0][1][0][1][1][0][2][1][0][1][1], "du");
          expect(ndArray[0][0][1][0][1][1][0][2][1][0][1][2], "dv");
          expect(ndArray[0][0][1][0][1][1][1][0][0][0][0][0], 457);
          expect(ndArray[0][0][1][0][1][1][1][0][0][0][0][1], 7372);
          expect(ndArray[0][0][1][0][1][1][1][0][0][0][0][2], 7459724);
          expect(ndArray[0][0][1][0][1][1][1][0][0][0][1][0], "dw");
          expect(ndArray[0][0][1][0][1][1][1][0][0][0][1][1], "dx");
          expect(ndArray[0][0][1][0][1][1][1][0][0][0][1][2], "dy");
          expect(ndArray[0][0][1][0][1][1][1][0][1][0][0][0], 345245);
          expect(ndArray[0][0][1][0][1][1][1][0][1][0][0][1], 45267);
          expect(ndArray[0][0][1][0][1][1][1][0][1][0][0][2], 7721);
          expect(ndArray[0][0][1][0][1][1][1][0][1][0][1][0], "dz");
          expect(ndArray[0][0][1][0][1][1][1][0][1][0][1][1], "ea");
          expect(ndArray[0][0][1][0][1][1][1][0][1][0][1][2], "eb");
          expect(ndArray[0][0][1][0][1][1][1][1][0][0][0][0], 4566879);
          expect(ndArray[0][0][1][0][1][1][1][1][0][0][0][1], 766);
          expect(ndArray[0][0][1][0][1][1][1][1][0][0][0][2], 4326727);
          expect(ndArray[0][0][1][0][1][1][1][1][0][0][1][0], "\n");
          expect(ndArray[0][0][1][0][1][1][1][1][0][0][1][1], " ");
          expect(ndArray[0][0][1][0][1][1][1][1][0][0][1][2], "dfa45 a d");
          expect(ndArray[0][0][1][0][1][1][1][1][1][0][0][0], 23465);
          expect(ndArray[0][0][1][0][1][1][1][1][1][0][0][1], 24578);
          expect(ndArray[0][0][1][0][1][1][1][1][1][0][0][2], 245782);
          expect(ndArray[0][0][1][0][1][1][1][1][1][0][1][0], "4367 ");
          expect(ndArray[0][0][1][0][1][1][1][1][1][0][1][1], "saDtj45");
          expect(ndArray[0][0][1][0][1][1][1][1][1][0][1][2], " ");
          expect(ndArray[0][0][1][0][1][1][1][2][0][0][0][0], 239);
          expect(ndArray[0][0][1][0][1][1][1][2][0][0][0][1], 23);
          expect(ndArray[0][0][1][0][1][1][1][2][0][0][0][2], 3);
          expect(ndArray[0][0][1][0][1][1][1][2][0][0][1][0], "asd 5 Rgv3d5sx");
          expect(ndArray[0][0][1][0][1][1][1][2][0][0][1][1], "");
          expect(ndArray[0][0][1][0][1][1][1][2][0][0][1][2], "654w345 fd");
          expect(ndArray[0][0][1][0][1][1][1][2][1][0][0][0], 57838);
          expect(ndArray[0][0][1][0][1][1][1][2][1][0][0][1], 6);
          expect(ndArray[0][0][1][0][1][1][1][2][1][0][0][2], 145684);
          expect(ndArray[0][0][1][0][1][1][1][2][1][0][1][0],
              "rgsDFerg r sdf sd r45 3w s");
          expect(ndArray[0][0][1][0][1][1][1][2][1][0][1][1], "dfg tyj");
          expect(ndArray[0][0][1][0][1][1][1][2][1][0][1][2], "fgj56");
        },
      );
    },
  );

  group(
    "numDimensions",
    () {
      group(
        "1d",
        () {
          test(
            "explicitly given to constructor",
            () {
              final NdArray ndArray1 = build1dArray();
              final NdArray ndArray2 = NdArray(1);

              expect(ndArray1.numDimensions, 1);
              expect(ndArray2.numDimensions, 1);
            },
          );

          test(
            "implicitly calculated in constructor",
            () {
              final NdArray ndArray = NdArray.fromList(testList1d);

              expect(ndArray.numDimensions, 1);
            },
          );
        },
      );

      group(
        "2d",
        () {
          test(
            "explicitly given to constructor",
            () {
              final NdArray ndArray1 = build2dArray();
              final NdArray ndArray2 = NdArray(2);

              expect(ndArray1.numDimensions, 2);
              expect(ndArray2.numDimensions, 2);
            },
          );

          test(
            "implicitly calculated in constructor",
            () {
              final NdArray ndArray = NdArray.fromList(testList2d);

              expect(ndArray.numDimensions, 2);
            },
          );
        },
      );

      group(
        "3d",
        () {
          test(
            "explicitly given to constructor",
            () {
              final NdArray ndArray1 = build3dArray();
              final NdArray ndArray2 = NdArray(3);

              expect(ndArray1.numDimensions, 3);
              expect(ndArray2.numDimensions, 3);
            },
          );

          test(
            "implicitly calculated in constructor",
            () {
              final NdArray ndArray = NdArray.fromList(testList3d);

              expect(ndArray.numDimensions, 3);
            },
          );
        },
      );

      group(
        "4d",
        () {
          test(
            "explicitly given to constructor",
            () {
              final NdArray ndArray1 = build4dArray();
              final NdArray ndArray2 = NdArray(4);

              expect(ndArray1.numDimensions, 4);
              expect(ndArray2.numDimensions, 4);
            },
          );

          test(
            "implicitly calculated in constructor",
            () {
              final NdArray ndArray = NdArray.fromList(testList4d);

              expect(ndArray.numDimensions, 4);
            },
          );
        },
      );

      group(
        "12d",
        () {
          test(
            "explicitly given to constructor",
            () {
              final NdArray ndArray1 = build12dArray();
              final NdArray ndArray2 = NdArray(12);

              expect(ndArray1.numDimensions, 12);
              expect(ndArray2.numDimensions, 12);
            },
          );

          test(
            "implicitly calculated in constructor",
            () {
              final NdArray ndArray = NdArray.fromList(testList12d);

              expect(ndArray.numDimensions, 12);
            },
          );
        },
      );
    },
  );

  group(
    "shape",
    () {
      test(
        "1d",
        () {
          final NdArray ndArray1 = NdArray(1);
          final NdArray ndArray2 = NdArray.fromList(testList1d);

          expect(ndArray1.shape, [1]);
          expect(ndArray2.shape, [4]);
        },
      );

      test(
        "2d",
        () {
          final NdArray ndArray1 = NdArray(2);
          final NdArray ndArray2 = NdArray.fromList(testList2d);

          expect(ndArray1.shape, [1, 1]);
          expect(ndArray2.shape, [2, 2]);
        },
      );

      test(
        "3d",
        () {
          final NdArray ndArray1 = NdArray(3);
          final NdArray ndArray2 = NdArray.fromList(testList3d);

          expect(ndArray1.shape, [1, 1, 1]);
          expect(ndArray2.shape, [2, 2, 2]);
        },
      );

      test(
        "4d",
        () {
          final NdArray ndArray1 = NdArray(4);
          final NdArray ndArray2 = NdArray.fromList(testList4d);

          expect(ndArray1.shape, [1, 1, 1, 1]);
          expect(ndArray2.shape, [4, 2, 2, 2]);
        },
      );

      test(
        "12d",
        () {
          final NdArray ndArray1 = NdArray(12);
          final NdArray ndArray2 = NdArray.fromList(testList12d);

          expect(ndArray1.shape, [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);
          expect(ndArray2.shape, [1, 1, 2, 1, 2, 2, 2, 3, 2, 1, 2, 3]);
        },
      );
    },
  );

  group(
    "reshape",
    () {
      group(
        "1d",
        () {
          test(
            "grow",
            () {
              final NdArray ndArray = NdArray.fromList(testList1d);

              ndArray.reshape([8]);

              expect(ndArray.shape, [8]);
              expect(ndArray.data, [1, 2, 3, 4, null, null, null, null]);
            },
          );

          test(
            "shrink",
            () {
              final NdArray ndArray = NdArray.fromList(testList1d);

              ndArray.reshape([2]);

              expect(ndArray.shape, [2]);
              expect(ndArray.data, [1, 2]);
            },
          );

          test(
            "same size",
            () {
              final NdArray ndArray = NdArray.fromList(testList1d);

              ndArray.reshape([-1]);

              expect(ndArray.shape, [4]);
              expect(ndArray.data, testList1d);
            },
          );

          test(
            "invalid shape",
            () {
              final NdArray ndArray = NdArray.fromList(testList1d);

              expect(() => ndArray.reshape([0]), throwsArgumentError);
              expect(() => ndArray.reshape([-2]), throwsArgumentError);
            },
          );

          test(
            "invalid dimension",
            () {
              final NdArray ndArray = NdArray.fromList(testList1d);

              expect(() => ndArray.reshape([2, 2]), throwsArgumentError);
            },
          );
        },
      );

      group(
        "2d",
        () {
          test(
            "grow",
            () {
              final NdArray ndArray = NdArray.fromList(testList2d);

              ndArray.reshape([3, 4]);

              expect(ndArray.shape, [3, 4]);
              expect(ndArray.data, [
                [1, 2, null, null],
                [3, 4, null, null],
                [null, null, null, null]
              ]);
            },
          );

          test(
            "shrink",
            () {
              final NdArray ndArray = NdArray.fromList(testList2d);

              ndArray.reshape([1, 2]);

              expect(ndArray.shape, [1, 2]);
              expect(ndArray.data, [
                [1, 2],
              ]);
            },
          );

          test(
            "same size",
            () {
              final NdArray ndArray = NdArray.fromList(testList2d);

              ndArray.reshape([-1, 2]);

              expect(ndArray.shape, [2, 2]);
              expect(ndArray.data, testList2d);
            },
          );

          test(
            "invalid shape",
            () {
              final NdArray ndArray = NdArray.fromList(testList2d);

              expect(() => ndArray.reshape([0, 2]), throwsArgumentError);
              expect(() => ndArray.reshape([-2, 2]), throwsArgumentError);
              expect(() => ndArray.reshape([2, 0]), throwsArgumentError);
              expect(() => ndArray.reshape([2, -2]), throwsArgumentError);
            },
          );

          test(
            "invalid dimension",
            () {
              final NdArray ndArray = NdArray.fromList(testList2d);

              expect(() => ndArray.reshape([2]), throwsArgumentError);
              expect(() => ndArray.reshape([2, 2, 2]), throwsArgumentError);
            },
          );
        },
      );

      group(
        "3d",
        () {
          test(
            "grow",
            () {
              final NdArray ndArray = NdArray.fromList(testList3d);

              ndArray.reshape([2, 2, 3]);

              expect(ndArray.shape, [2, 2, 3]);
              expect(ndArray.data, [
                [
                  [1, 2, null],
                  [3, 4, null],
                ],
                [
                  [5, 6, null],
                  [7, 8, null]
                ]
              ]);
            },
          );

          test(
            "shrink",
            () {
              final NdArray ndArray = NdArray.fromList(testList3d);

              ndArray.reshape([1, 2, 2]);

              expect(ndArray.shape, [1, 2, 2]);
              expect(ndArray.data, [
                [
                  [1, 2],
                  [3, 4],
                ],
              ]);
            },
          );

          test(
            "same size",
            () {
              final NdArray ndArray = NdArray.fromList(testList3d);

              ndArray.reshape([2, 2, 2]);

              expect(ndArray.shape, [2, 2, 2]);
              expect(ndArray.data, testList3d);
            },
          );

          test(
            "invalid shape",
            () {
              final NdArray ndArray = NdArray.fromList(testList3d);

              expect(() => ndArray.reshape([0, 2, 2]), throwsArgumentError);
              expect(() => ndArray.reshape([-2, 2, 2]), throwsArgumentError);
              expect(() => ndArray.reshape([2, 0, 2]), throwsArgumentError);
              expect(() => ndArray.reshape([2, -2, 2]), throwsArgumentError);
              expect(() => ndArray.reshape([2, 2, 0]), throwsArgumentError);
              expect(() => ndArray.reshape([2, 2, -2]), throwsArgumentError);
            },
          );

          test(
            "invalid dimension",
            () {
              final NdArray ndArray = NdArray.fromList(testList3d);

              expect(() => ndArray.reshape([2, 2]), throwsArgumentError);
              expect(() => ndArray.reshape([2, 2, 2, 2]), throwsArgumentError);
            },
          );
        },
      );

      group(
        "4d",
        () {
          test(
            "grow",
            () {
              final NdArray ndArray = NdArray.fromList(testList4d);

              ndArray.reshape([5, 3, 3, 3]);

              expect(ndArray.shape, [5, 3, 3, 3]);
              expect(ndArray.data, [
                [
                  [
                    [1, 2, null],
                    [3, 4, null],
                    [null, null, null]
                  ],
                  [
                    [4, 3, null],
                    [2, 1, null],
                    [null, null, null]
                  ],
                  [
                    [null, null, null],
                    [null, null, null],
                    [null, null, null]
                  ]
                ],
                [
                  [
                    [5, 6, null],
                    [7, 8, null],
                    [null, null, null]
                  ],
                  [
                    [8, 7, null],
                    [6, 5, null],
                    [null, null, null]
                  ],
                  [
                    [null, null, null],
                    [null, null, null],
                    [null, null, null]
                  ]
                ],
                [
                  [
                    [9, 10, null],
                    [11, 12, null],
                    [null, null, null]
                  ],
                  [
                    [12, 11, null],
                    [10, 9, null],
                    [null, null, null]
                  ],
                  [
                    [null, null, null],
                    [null, null, null],
                    [null, null, null]
                  ]
                ],
                [
                  [
                    [13, 14, null],
                    [15, 16, null],
                    [null, null, null]
                  ],
                  [
                    [16, 15, null],
                    [14, 13, null],
                    [null, null, null]
                  ],
                  [
                    [null, null, null],
                    [null, null, null],
                    [null, null, null]
                  ]
                ],
                [
                  [
                    [null, null, null],
                    [null, null, null],
                    [null, null, null]
                  ],
                  [
                    [null, null, null],
                    [null, null, null],
                    [null, null, null]
                  ],
                  [
                    [null, null, null],
                    [null, null, null],
                    [null, null, null]
                  ]
                ]
              ]);
            },
          );

          test(
            "shrink",
            () {
              final NdArray ndArray = NdArray.fromList(testList4d);

              ndArray.reshape([2, 2, 2, 2]);

              expect(ndArray.shape, [2, 2, 2, 2]);
              expect(ndArray.data, [
                [
                  [
                    [1, 2],
                    [3, 4],
                  ],
                  [
                    [4, 3],
                    [2, 1],
                  ],
                ],
                [
                  [
                    [5, 6],
                    [7, 8],
                  ],
                  [
                    [8, 7],
                    [6, 5],
                  ],
                ],
              ]);
            },
          );

          test(
            "same size",
            () {
              final NdArray ndArray = NdArray.fromList(testList4d);

              ndArray.reshape([-1, -1, -1, -1]);

              expect(ndArray.shape, [4, 2, 2, 2]);
              expect(ndArray.data, testList4d);
            },
          );

          test(
            "invalid shape",
            () {
              final NdArray ndArray = NdArray.fromList(testList4d);

              expect(() => ndArray.reshape([0, 2, 2, 2]), throwsArgumentError);
              expect(() => ndArray.reshape([-2, 2, 2, 2]), throwsArgumentError);
              expect(() => ndArray.reshape([2, 0, 2, 2]), throwsArgumentError);
              expect(() => ndArray.reshape([2, -2, 2, 2]), throwsArgumentError);
              expect(() => ndArray.reshape([2, 2, 0, 2]), throwsArgumentError);
              expect(() => ndArray.reshape([2, 2, -2, 2]), throwsArgumentError);
              expect(() => ndArray.reshape([2, 2, 2, 0]), throwsArgumentError);
              expect(() => ndArray.reshape([2, 2, 2, -2]), throwsArgumentError);
            },
          );

          test(
            "invalid dimension",
            () {
              final NdArray ndArray = NdArray.fromList(testList4d);

              expect(() => ndArray.reshape([2, 2, 2]), throwsArgumentError);
              expect(
                  () => ndArray.reshape([2, 2, 2, 2, 2]), throwsArgumentError);
            },
          );
        },
      );

      group(
        "12d",
        () {
          test(
            "grow",
            () {
              final NdArray ndArray = NdArray.fromList(testList12d);

              ndArray.reshape([1, 1, 2, 1, 2, 2, 2, 3, 2, 1, 2, 4]);

              expect(ndArray.shape, [1, 1, 2, 1, 2, 2, 2, 3, 2, 1, 2, 4]);
              expect(ndArray.data, [
                [
                  [
                    [
                      [
                        [
                          [
                            [
                              [
                                [
                                  [
                                    [1, 2, 3, null],
                                    ["a", "b", "c", null],
                                  ],
                                ],
                                [
                                  [
                                    [4, 5, 6, null],
                                    ["d", "e", "f", null],
                                  ],
                                ],
                              ],
                              [
                                [
                                  [
                                    [7, 8, 9, null],
                                    ["g", "h", "i", null],
                                  ],
                                ],
                                [
                                  [
                                    [10, 11, 12, null],
                                    ["j", "k", "l", null],
                                  ],
                                ],
                              ],
                              [
                                [
                                  [
                                    [13, 14, 15, null],
                                    ["m", "n", "o", null],
                                  ],
                                ],
                                [
                                  [
                                    [16, 17, 18, null],
                                    ["p", "q", "r", null],
                                  ],
                                ],
                              ],
                            ],
                            [
                              [
                                [
                                  [
                                    [19, 20, 21, null],
                                    ["s", "t", "u", null],
                                  ],
                                ],
                                [
                                  [
                                    [22, 23, 24, null],
                                    ["v", "w", "x", null],
                                  ],
                                ],
                              ],
                              [
                                [
                                  [
                                    [25, 26, 27, null],
                                    ["y", "z", "aa", null],
                                  ],
                                ],
                                [
                                  [
                                    [28, 29, 30, null],
                                    ["ab", "ac", "ad", null],
                                  ],
                                ],
                              ],
                              [
                                [
                                  [
                                    [31, 32, 33, null],
                                    ["ae", "af", "ag", null],
                                  ],
                                ],
                                [
                                  [
                                    [34, 35, 36, null],
                                    ["ah", "ai", "aj", null],
                                  ],
                                ],
                              ],
                            ],
                          ],
                          [
                            [
                              [
                                [
                                  [
                                    [37, 38, 39, null],
                                    ["ak", "al", "am", null],
                                  ],
                                ],
                                [
                                  [
                                    [40, 41, 42, null],
                                    ["an", "ao", "ap", null],
                                  ],
                                ],
                              ],
                              [
                                [
                                  [
                                    [43, 44, 45, null],
                                    ["aq", "ar", "as", null],
                                  ],
                                ],
                                [
                                  [
                                    [46, 47, 48, null],
                                    ["at", "au", "av", null],
                                  ],
                                ],
                              ],
                              [
                                [
                                  [
                                    [49, 50, 51, null],
                                    ["aw", "ax", "ay", null],
                                  ],
                                ],
                                [
                                  [
                                    [52, 53, 54, null],
                                    ["az", "ba", "bb", null],
                                  ],
                                ],
                              ],
                            ],
                            [
                              [
                                [
                                  [
                                    [55, 56, 57, null],
                                    ["bc", "bd", "be", null],
                                  ],
                                ],
                                [
                                  [
                                    [58, 59, 60, null],
                                    ["bf", "bg", "bh", null],
                                  ],
                                ],
                              ],
                              [
                                [
                                  [
                                    [61, 62, 63, null],
                                    ["bi", "bj", "bk", null],
                                  ],
                                ],
                                [
                                  [
                                    [64, 65, 66, null],
                                    ["bl", "bm", "bn", null],
                                  ],
                                ],
                              ],
                              [
                                [
                                  [
                                    [67, 68, 69, null],
                                    ["bo", "bp", "bq", null],
                                  ],
                                ],
                                [
                                  [
                                    [70, 71, 72, null],
                                    ["br", "bs", "bt", null],
                                  ],
                                ],
                              ],
                            ],
                          ],
                        ],
                        [
                          [
                            [
                              [
                                [
                                  [
                                    [73, 74, 75, null],
                                    ["bu", "bv", "bw", null],
                                  ],
                                ],
                                [
                                  [
                                    [76, 77, 78, null],
                                    ["bx", "by", "bz", null],
                                  ],
                                ],
                              ],
                              [
                                [
                                  [
                                    [79, 80, 81, null],
                                    ["ca", "cb", "cc", null],
                                  ],
                                ],
                                [
                                  [
                                    [82, 83, 84, null],
                                    ["cd", "ce", "cf", null],
                                  ],
                                ],
                              ],
                              [
                                [
                                  [
                                    [85, 86, 87, null],
                                    ["cg", "ch", "ci", null],
                                  ],
                                ],
                                [
                                  [
                                    [88, 89, 90, null],
                                    ["cj", "ck", "cl", null],
                                  ],
                                ],
                              ],
                            ],
                            [
                              [
                                [
                                  [
                                    [91, 92, 93, null],
                                    ["cm", "cn", "co", null],
                                  ],
                                ],
                                [
                                  [
                                    [95, 95, 96, null],
                                    ["cp", "cq", "cr", null],
                                  ],
                                ],
                              ],
                              [
                                [
                                  [
                                    [97, 98, 99, null],
                                    ["cs", "ct", "cu", null],
                                  ],
                                ],
                                [
                                  [
                                    [100, 101, 102, null],
                                    ["cv", "cw", "cx", null],
                                  ],
                                ],
                              ],
                              [
                                [
                                  [
                                    [103, 104, 105, null],
                                    ["cy", "cz", "da", null],
                                  ],
                                ],
                                [
                                  [
                                    [106, 107, 108, null],
                                    ["db", "dc", "dd", null],
                                  ],
                                ],
                              ],
                            ],
                          ],
                          [
                            [
                              [
                                [
                                  [
                                    [109, 110, 111, null],
                                    ["de", "df", "dg", null],
                                  ],
                                ],
                                [
                                  [
                                    [112, 113, 114, null],
                                    ["dh", "di", "dj", null],
                                  ],
                                ],
                              ],
                              [
                                [
                                  [
                                    [115, 116, 117, null],
                                    ["dk", "dl", "dm", null],
                                  ],
                                ],
                                [
                                  [
                                    [118, 119, 120, null],
                                    ["dn", "do", "dp", null],
                                  ],
                                ],
                              ],
                              [
                                [
                                  [
                                    [121, 122, 123, null],
                                    ["dq", "dr", "ds", null],
                                  ],
                                ],
                                [
                                  [
                                    [124, 125, 126, null],
                                    ["dt", "du", "dv", null],
                                  ],
                                ],
                              ],
                            ],
                            [
                              [
                                [
                                  [
                                    [127, 128, 129, null],
                                    ["dw", "dx", "dy", null],
                                  ],
                                ],
                                [
                                  [
                                    [130, 131, 132, null],
                                    ["dz", "ea", "eb", null],
                                  ],
                                ],
                              ],
                              [
                                [
                                  [
                                    [133, 134, 135, null],
                                    ["ec", "ed", "ee", null],
                                  ],
                                ],
                                [
                                  [
                                    [136, 137, 138, null],
                                    ["ef", "eg", "eh", null],
                                  ],
                                ],
                              ],
                              [
                                [
                                  [
                                    [139, 140, 141, null],
                                    ["ei", "ej", "ek", null],
                                  ],
                                ],
                                [
                                  [
                                    [142, 143, 144, null],
                                    ["el", "em", "en", null],
                                  ],
                                ],
                              ],
                            ],
                          ],
                        ],
                      ],
                    ],
                    [
                      [
                        [
                          [
                            [
                              [
                                [
                                  [
                                    [6523, 65, 143, null],
                                    ["hjkDhg", "ghg4hb", "gui6r7", null],
                                  ],
                                ],
                                [
                                  [
                                    [563, 73, 537, null],
                                    ["bsd6f546", "DF^YH", "fddDfa", null],
                                  ],
                                ],
                              ],
                              [
                                [
                                  [
                                    [735, 573, 753, null],
                                    ["g", "h", "i", null],
                                  ],
                                ],
                                [
                                  [
                                    [45677, 98, 16572, null],
                                    ["j", "k", "l", null],
                                  ],
                                ],
                              ],
                              [
                                [
                                  [
                                    [1356, 24, 5715, null],
                                    ["asDdDdGfm", "ndfSdf", "oDFD", null],
                                  ],
                                ],
                                [
                                  [
                                    [54673, 3456, 55, null],
                                    ["kDk fRjd", "q d", "rdgGfdDad", null],
                                  ],
                                ],
                              ],
                            ],
                            [
                              [
                                [
                                  [
                                    [56356, 55, 457, null],
                                    ["sd", "te", "ude", null],
                                  ],
                                ],
                                [
                                  [
                                    [22, 23, 24, null],
                                    ["vDdfFg", "wsd", "xfe", null],
                                  ],
                                ],
                              ],
                              [
                                [
                                  [
                                    [1234, 52, 99705, null],
                                    ["yDFfGfZds", "zDFe", "aa", null],
                                  ],
                                ],
                                [
                                  [
                                    [462, 727, 8382, null],
                                    ["ab", "H", "ht", null],
                                  ],
                                ],
                              ],
                              [
                                [
                                  [
                                    [563457, 24, 757247, null],
                                    ["M", "M", "M", null],
                                  ],
                                ],
                                [
                                  [
                                    [6727, 3411, 3478900, null],
                                    ["a5asd5ty", "ert7usj5", "dfrDn56", null],
                                  ],
                                ],
                              ],
                            ],
                          ],
                          [
                            [
                              [
                                [
                                  [
                                    [5892, 2002, 1003367, null],
                                    ["aBka0y4", "a5l", "am", null],
                                  ],
                                ],
                                [
                                  [
                                    [452728, 66, 84838, null],
                                    ["df  an", "HR r g v d", "adfFDp", null],
                                  ],
                                ],
                              ],
                              [
                                [
                                  [
                                    [58383, 2244, 55, null],
                                    ["asq", "a4r", "ah5s", null],
                                  ],
                                ],
                                [
                                  [
                                    [1, 922458, 65004, null],
                                    ["a4z6t", "a4nau", "n4at", null],
                                  ],
                                ],
                              ],
                              [
                                [
                                  [
                                    [30038, 151, -9, null],
                                    ["zn46564n4", "asd5a5", " ver  w ", null],
                                  ],
                                ],
                                [
                                  [
                                    [2345267, 44, 11677, null],
                                    [
                                      "aDE%^z",
                                      "D%N",
                                      "[0][0][1][0][0][1][0][2][1][0][1][2]",
                                      null
                                    ],
                                  ],
                                ],
                              ],
                            ],
                            [
                              [
                                [
                                  [
                                    [4771, 557, 15 - 7, null],
                                    ["s4", "a", "b", null],
                                  ],
                                ],
                                [
                                  [
                                    [179356, 4476, 0, null],
                                    ["c", "d", "e", null],
                                  ],
                                ],
                              ],
                              [
                                [
                                  [
                                    [477, 6627, 44, null],
                                    ["f", "g", "z", null],
                                  ],
                                ],
                                [
                                  [
                                    [45267, 756, 4472714, null],
                                    ["y", "x", "w", null],
                                  ],
                                ],
                              ],
                              [
                                [
                                  [
                                    [46727, 68, 457, null],
                                    ["boo", "ae43", "asd fa sd4", null],
                                  ],
                                ],
                                [
                                  [
                                    [3, 6727, 5672, null],
                                    [
                                      "bra sd",
                                      "k4789d3 klGud 83 s",
                                      "bt",
                                      null
                                    ],
                                  ],
                                ],
                              ],
                            ],
                          ],
                        ],
                        [
                          [
                            [
                              [
                                [
                                  [
                                    [745, 5, 5, null],
                                    ["df4h5 f", "d r443 s", "bw", null],
                                  ],
                                ],
                                [
                                  [
                                    [74, 74, 74, null],
                                    ["bx", "sd 4 46", "bz", null],
                                  ],
                                ],
                              ],
                              [
                                [
                                  [
                                    [74, 74, 74, null],
                                    ["ca", "cb", "7hw46 ga def", null],
                                  ],
                                ],
                                [
                                  [
                                    [9823, 823822, 828, null],
                                    ["cd", "a  t3 ds", "cf", null],
                                  ],
                                ],
                              ],
                              [
                                [
                                  [
                                    [7345, 1345, 4145, null],
                                    [
                                      "a45r sd",
                                      "d4frh",
                                      "asdf a4sdf 4asd6f d",
                                      null
                                    ],
                                  ],
                                ],
                                [
                                  [
                                    [5789, 775, 789, null],
                                    [
                                      "g>hkr    .r 35  4 5ht,,r.brt d",
                                      "f",
                                      "gs45",
                                      null
                                    ],
                                  ],
                                ],
                              ],
                            ],
                            [
                              [
                                [
                                  [
                                    [7823, 92, 45672, null],
                                    ["cm", "cn", "co", null],
                                  ],
                                ],
                                [
                                  [
                                    [95, 95, 96, null],
                                    ["cp", "cq", "cr", null],
                                  ],
                                ],
                              ],
                              [
                                [
                                  [
                                    [461, 98, 44, null],
                                    ["cs", "ct", "cu", null],
                                  ],
                                ],
                                [
                                  [
                                    [111, 4564, 789, null],
                                    ["cv", "cw", "cx", null],
                                  ],
                                ],
                              ],
                              [
                                [
                                  [
                                    [88, 4564, 87789, null],
                                    ["cy", "cz", "da", null],
                                  ],
                                ],
                                [
                                  [
                                    [17096, 107787, 1058, null],
                                    ["db", "dc", "dd", null],
                                  ],
                                ],
                              ],
                            ],
                          ],
                          [
                            [
                              [
                                [
                                  [
                                    [4527, 44, 775, null],
                                    ["de", "df", "dg", null],
                                  ],
                                ],
                                [
                                  [
                                    [5821, 457, 42, null],
                                    ["dh", "di", "dj", null],
                                  ],
                                ],
                              ],
                              [
                                [
                                  [
                                    [79034, 2457098, 1000001, null],
                                    ["dk", "dl", "dm", null],
                                  ],
                                ],
                                [
                                  [
                                    [468345, 23462, 678, null],
                                    ["dn", "do", "dp", null],
                                  ],
                                ],
                              ],
                              [
                                [
                                  [
                                    [12, 457, 12, null],
                                    ["dq", "dr", "ds", null],
                                  ],
                                ],
                                [
                                  [
                                    [15, 150, 1500, null],
                                    ["dt", "du", "dv", null],
                                  ],
                                ],
                              ],
                            ],
                            [
                              [
                                [
                                  [
                                    [457, 7372, 7459724, null],
                                    ["dw", "dx", "dy", null],
                                  ],
                                ],
                                [
                                  [
                                    [345245, 45267, 7721, null],
                                    ["dz", "ea", "eb", null],
                                  ],
                                ],
                              ],
                              [
                                [
                                  [
                                    [4566879, 766, 4326727, null],
                                    ["\n", " ", "dfa45 a d", null],
                                  ],
                                ],
                                [
                                  [
                                    [23465, 24578, 245782, null],
                                    ["4367 ", "saDtj45", " ", null],
                                  ],
                                ],
                              ],
                              [
                                [
                                  [
                                    [239, 23, 3, null],
                                    ["asd 5 Rgv3d5sx", "", "654w345 fd", null],
                                  ],
                                ],
                                [
                                  [
                                    [57838, 6, 145684, null],
                                    [
                                      "rgsDFerg r sdf sd r45 3w s",
                                      "dfg tyj",
                                      "fgj56",
                                      null
                                    ],
                                  ],
                                ],
                              ],
                            ],
                          ],
                        ],
                      ],
                    ],
                  ],
                ],
              ]);
            },
          );

          test(
            "shrink",
            () {
              final NdArray ndArray = NdArray.fromList(testList12d);

              ndArray.reshape([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);

              expect(ndArray.shape, [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);
              expect(ndArray.data, [
                [
                  [
                    [
                      [
                        [
                          [
                            [
                              [
                                [
                                  [
                                    [1]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]);
            },
          );

          test(
            "same size",
            () {
              final NdArray ndArray = NdArray.fromList(testList12d);

              ndArray.reshape([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]);

              expect(ndArray.shape, [1, 1, 2, 1, 2, 2, 2, 3, 2, 1, 2, 3]);
              expect(ndArray.data, testList12d);
            },
          );

          test(
            "invalid shape",
            () {
              final NdArray ndArray = NdArray.fromList(testList12d);

              expect(() => ndArray.reshape([0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]),
                  throwsArgumentError);
              expect(() => ndArray.reshape([-2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]),
                  throwsArgumentError);
              expect(() => ndArray.reshape([2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2]),
                  throwsArgumentError);
              expect(() => ndArray.reshape([2, -2, 2, 2, 2, 2, 2, 2, 2, 2, 2]),
                  throwsArgumentError);
              expect(() => ndArray.reshape([2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2]),
                  throwsArgumentError);
              expect(() => ndArray.reshape([2, 2, -2, 2, 2, 2, 2, 2, 2, 2, 2]),
                  throwsArgumentError);
              expect(() => ndArray.reshape([2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2]),
                  throwsArgumentError);
              expect(() => ndArray.reshape([2, 2, 2, -2, 2, 2, 2, 2, 2, 2, 2]),
                  throwsArgumentError);
              expect(() => ndArray.reshape([2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2]),
                  throwsArgumentError);
              expect(() => ndArray.reshape([2, 2, 2, 2, -2, 2, 2, 2, 2, 2, 2]),
                  throwsArgumentError);
              expect(() => ndArray.reshape([2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2]),
                  throwsArgumentError);
              expect(() => ndArray.reshape([2, 2, 2, 2, 2, -2, 2, 2, 2, 2, 2]),
                  throwsArgumentError);
              expect(() => ndArray.reshape([2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2]),
                  throwsArgumentError);
              expect(() => ndArray.reshape([2, 2, 2, 2, 2, 2, -2, 2, 2, 2, 2]),
                  throwsArgumentError);
              expect(() => ndArray.reshape([2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2]),
                  throwsArgumentError);
              expect(() => ndArray.reshape([2, 2, 2, 2, 2, 2, 2, -2, 2, 2, 2]),
                  throwsArgumentError);
              expect(() => ndArray.reshape([2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2]),
                  throwsArgumentError);
              expect(() => ndArray.reshape([2, 2, 2, 2, 2, 2, 2, 2, -2, 2, 2]),
                  throwsArgumentError);
              expect(() => ndArray.reshape([2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2]),
                  throwsArgumentError);
              expect(() => ndArray.reshape([2, 2, 2, 2, 2, 2, 2, 2, 2, -2, 2]),
                  throwsArgumentError);
              expect(() => ndArray.reshape([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0]),
                  throwsArgumentError);
              expect(() => ndArray.reshape([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -2]),
                  throwsArgumentError);
            },
          );

          test(
            "invalid dimension",
            () {
              final NdArray ndArray = NdArray.fromList(testList12d);

              expect(() => ndArray.reshape([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]),
                  throwsArgumentError);
              expect(
                  () =>
                      ndArray.reshape([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]),
                  throwsArgumentError);
            },
          );
        },
      );
    },
  );

  test(
    "[]= shape exploit",
    () {
      final NdArray ndArray = NdArray.fromList(testList4d);

      expect(() => ndArray[0][0][0][0] = 9999, returnsNormally);
      expect(() => ndArray[0][0][0] = 9999, throwsArgumentError);
    },
  );

  group(
    "copy",
    () {
      test(
        "1d",
        () {
          final NdArray ndArray = NdArray.fromList(testList1d);
          final NdArray copy = ndArray.copy();

          expect(ndArray == copy, true);

          copy[0] = 9999;

          expect(ndArray == copy, false);
        },
      );

      test(
        "2d",
        () {
          final NdArray ndArray = NdArray.fromList(testList2d);
          final NdArray copy = ndArray.copy();

          expect(ndArray == copy, true);

          copy[0][0] = 9999;

          expect(ndArray == copy, false);
        },
      );

      test(
        "3d",
        () {
          final NdArray ndArray = NdArray.fromList(testList3d);
          final NdArray copy = ndArray.copy();

          expect(ndArray == copy, true);

          copy[0][0][0] = 9999;

          expect(ndArray == copy, false);
        },
      );

      test(
        "4d",
        () {
          final NdArray ndArray = NdArray.fromList(testList4d);
          final NdArray copy = ndArray.copy();

          expect(ndArray == copy, true);

          copy[0][0][0][0] = 9999;

          expect(ndArray == copy, false);
        },
      );

      test(
        "12d",
        () {
          final NdArray ndArray = NdArray.fromList(testList12d);
          final NdArray copy = ndArray.copy();

          expect(ndArray == copy, true);

          copy[0][0][0][0][0][0][0][0][0][0][0][0] = 9999;

          expect(ndArray == copy, false);
        },
      );
    },
  );

  group(
    "==",
    () {
      group(
        "1d",
        () {
          final NdArray ndArray1 = NdArray.fromList(testList1d);

          test(
            "two arrays with the same data should be equal",
            () {
              final NdArray ndArray2 = build1dArray();

              expect(ndArray1 == ndArray2, true);
            },
          );

          test(
            "two arrays with different data should not be equal",
            () {
              final NdArray ndArray2 = build1dArray(2);

              expect(ndArray1 == ndArray2, false);
            },
          );

          test(
            "two arrays with the same data in a different order should not be "
            "equal",
            () {
              final NdArray ndArray2 = build1dArray(3);

              expect(ndArray1 == ndArray2, false);
            },
          );
        },
      );

      group(
        "2d",
        () {
          final NdArray ndArray1 = NdArray.fromList(testList2d);

          test(
            "two arrays with the same data should be equal",
            () {
              final NdArray ndArray2 = build2dArray();

              expect(ndArray1 == ndArray2, true);
            },
          );

          test(
            "two arrays with different data should not be equal",
            () {
              final NdArray ndArray2 = build2dArray(2);

              expect(ndArray1 == ndArray2, false);
            },
          );

          test(
            "two arrays with the same data in a different order should not be "
            "equal",
            () {
              final NdArray ndArray2 = build2dArray(3);

              expect(ndArray1 == ndArray2, false);
            },
          );
        },
      );

      group(
        "3d",
        () {
          final NdArray ndArray1 = NdArray.fromList(testList3d);

          test(
            "two arrays with the same data should be equal",
            () {
              final NdArray ndArray2 = build3dArray();

              expect(ndArray1 == ndArray2, true);
            },
          );

          test(
            "two arrays with different data should not be equal",
            () {
              final NdArray ndArray2 = build3dArray(2);

              expect(ndArray1 == ndArray2, false);
            },
          );

          test(
            "two arrays with the same data in a different order should not be "
            "equal",
            () {
              final NdArray ndArray2 = build3dArray(3);

              expect(ndArray1 == ndArray2, false);
            },
          );
        },
      );

      group(
        "4d",
        () {
          final NdArray ndArray1 = NdArray.fromList(testList4d);

          test(
            "two arrays with the same data should be equal",
            () {
              final NdArray ndArray2 = build4dArray();

              expect(ndArray1 == ndArray2, true);
            },
          );

          test(
            "two arrays with different data should not be equal",
            () {
              final NdArray ndArray2 = build4dArray(2);

              expect(ndArray1 == ndArray2, false);
            },
          );

          test(
            "two arrays with the same data in a different order should not be "
            "equal",
            () {
              final NdArray ndArray2 = build4dArray(3);

              expect(ndArray1 == ndArray2, false);
            },
          );
        },
      );

      group(
        "12d",
        () {
          final NdArray ndArray1 = NdArray.fromList(testList12d);

          test(
            "two arrays with the same data should be equal",
            () {
              final NdArray ndArray2 = build12dArray();

              expect(ndArray1 == ndArray2, true);
            },
          );

          test(
            "two arrays with different data should not be equal",
            () {
              final NdArray ndArray2 = build12dArray(2);

              expect(ndArray1 == ndArray2, false);
            },
          );

          test(
            "two arrays with the same data in a different order should not be "
            "equal",
            () {
              final NdArray ndArray2 = build12dArray(3);

              expect(ndArray1 == ndArray2, false);
            },
          );
        },
      );
    },
  );

  group(
    "hashCode",
    () {
      group(
        "1d",
        () {
          final NdArray ndArray1 = NdArray.fromList(testList1d);

          test(
            "two arrays with the same data should have the same hash code",
            () {
              final NdArray ndArray2 = build1dArray();

              expect(ndArray1.hashCode == ndArray2.hashCode, true);
            },
          );

          test(
            "two arrays with different data should have different hash codes",
            () {
              final NdArray ndArray2 = build1dArray(2);

              expect(ndArray1.hashCode == ndArray2.hashCode, false);
            },
          );

          test(
            "two arrays with the same data in a different order should have "
            "different hash codes",
            () {
              final NdArray ndArray2 = build1dArray(3);

              expect(ndArray1.hashCode == ndArray2.hashCode, false);
            },
          );
        },
      );

      group(
        "2d",
        () {
          final NdArray ndArray1 = NdArray.fromList(testList2d);

          test(
            "two arrays with the same data should have the same hash code",
            () {
              final NdArray ndArray2 = build2dArray();

              expect(ndArray1.hashCode == ndArray2.hashCode, true);
            },
          );

          test(
            "two arrays with different data should have different hash codes",
            () {
              final NdArray ndArray2 = build2dArray(2);

              expect(ndArray1.hashCode == ndArray2.hashCode, false);
            },
          );

          test(
            "two arrays with the same data in a different order should have "
            "different hash codes",
            () {
              final NdArray ndArray2 = build2dArray(3);

              expect(ndArray1.hashCode == ndArray2.hashCode, false);
            },
          );
        },
      );

      group(
        "3d",
        () {
          final NdArray ndArray1 = NdArray.fromList(testList3d);

          test(
            "two arrays with the same data should have the same hash code",
            () {
              final NdArray ndArray2 = build3dArray();

              expect(ndArray1.hashCode == ndArray2.hashCode, true);
            },
          );

          test(
            "two arrays with different data should have different hash codes",
            () {
              final NdArray ndArray2 = build3dArray(2);

              expect(ndArray1.hashCode == ndArray2.hashCode, false);
            },
          );

          test(
            "two arrays with the same data in a different order should have "
            "different hash codes",
            () {
              final NdArray ndArray2 = build3dArray(3);

              expect(ndArray1.hashCode == ndArray2.hashCode, false);
            },
          );
        },
      );

      group(
        "4d",
        () {
          final NdArray ndArray1 = NdArray.fromList(testList4d);

          test(
            "two arrays with the same data should have the same hash code",
            () {
              final NdArray ndArray2 = build4dArray();

              expect(ndArray1.hashCode == ndArray2.hashCode, true);
            },
          );

          test(
            "two arrays with different data should have different hash codes",
            () {
              final NdArray ndArray2 = build4dArray(2);

              expect(ndArray1.hashCode == ndArray2.hashCode, false);
            },
          );

          test(
            "two arrays with the same data in a different order should have "
            "different hash codes",
            () {
              final NdArray ndArray2 = build4dArray(3);

              expect(ndArray1.hashCode == ndArray2.hashCode, false);
            },
          );
        },
      );

      group(
        "12d",
        () {
          final NdArray ndArray1 = NdArray.fromList(testList12d);

          test(
            "two arrays with the same data should have the same hash code",
            () {
              final NdArray ndArray2 = build12dArray();

              expect(ndArray1.hashCode == ndArray2.hashCode, true);
            },
          );

          test(
            "two arrays with different data should have different hash codes",
            () {
              final NdArray ndArray2 = build12dArray(2);

              expect(ndArray1.hashCode == ndArray2.hashCode, false);
            },
          );

          test(
            "two arrays with the same data in a different order should have "
            "different hash codes",
            () {
              final NdArray ndArray2 = build12dArray(3);

              expect(ndArray1.hashCode == ndArray2.hashCode, false);
            },
          );
        },
      );
    },
  );
}

/// Builds a 1d array.
///
/// The `version` parameter is used to build different arrays.
/// * `version == 1`: The default array. This is equal to [testList1d].
/// * `version == 2`: This array slightly different from [testList1d].
/// * `version == 3`: This array has the same elements as [testList1d], but in
///   a different order.
NdArray build1dArray([int version = 1]) {
  final NdArray ndArray = NdArray(1);

  ndArray.reshape([4]);

  ndArray[0] = 1;
  ndArray[1] = 2;
  ndArray[2] = 3;
  ndArray[3] = 4;

  if (version == 2) {
    ndArray[0] = "a";
    ndArray[1] = "b";
    ndArray[2] = "c";
    ndArray[3] = "d";
  } else if (version == 3) {
    ndArray[0] = 4;
    ndArray[3] = 1;
  }

  return ndArray;
}

/// Builds a 2d array.
///
/// The `version` parameter is used to build different arrays.
/// * `version == 1`: The default array. This is equal to [testList2d].
/// * `version == 2`: This array slightly different from [testList2d].
/// * `version == 3`: This array has the same elements as [testList2d], but in
///   a different order.
NdArray build2dArray([int version = 1]) {
  final NdArray ndArray = NdArray(2);

  ndArray.reshape([2, 2]);

  ndArray[0][0] = 1;
  ndArray[0][1] = 2;
  ndArray[1][0] = 3;
  ndArray[1][1] = 4;

  if (version == 2) {
    ndArray[0][0] = 4;
  } else if (version == 3) {
    ndArray[0][1] = 3;
    ndArray[1][0] = 2;
  }

  return ndArray;
}

/// Builds a 3d array.
///
/// The `version` parameter is used to build different arrays.
/// * `version == 1`: The default array. This is equal to [testList3d].
/// * `version == 2`: This array slightly different from [testList3d].
/// * `version == 3`: This array has the same elements as [testList3d], but in
///   a different order.
NdArray build3dArray([int version = 1]) {
  final NdArray ndArray = NdArray(3);

  ndArray.reshape([2, 2, 2]);

  ndArray[0][0][0] = 1;
  ndArray[0][0][1] = 2;
  ndArray[0][1][0] = 3;
  ndArray[0][1][1] = 4;
  ndArray[1][0][0] = 5;
  ndArray[1][0][1] = 6;
  ndArray[1][1][0] = 7;
  ndArray[1][1][1] = 8;

  if (version == 2) {
    ndArray[0][0][1] = "2";
  } else if (version == 3) {
    ndArray[0][1][1] = 7;
    ndArray[1][0][1] = 4;
    ndArray[1][1][0] = 6;
  }

  return ndArray;
}

/// Builds a 4d array.
///
/// The `version` parameter is used to build different arrays.
/// * `version == 1`: The default array. This is equal to [testList4d].
/// * `version == 2`: This array slightly different from [testList4d].
/// * `version == 3`: This array has the same elements as [testList4d], but in
///   a different order.
NdArray build4dArray([int version = 1]) {
  final NdArray ndArray = NdArray(4);

  ndArray.reshape([4, 2, 2, 2]);

  ndArray[0][0][0][0] = 1;
  ndArray[0][0][0][1] = 2;
  ndArray[0][0][1][0] = 3;
  ndArray[0][0][1][1] = 4;
  ndArray[0][1][0][0] = 4;
  ndArray[0][1][0][1] = 3;
  ndArray[0][1][1][0] = 2;
  ndArray[0][1][1][1] = 1;
  ndArray[1][0][0][0] = 5;
  ndArray[1][0][0][1] = 6;
  ndArray[1][0][1][0] = 7;
  ndArray[1][0][1][1] = 8;
  ndArray[1][1][0][0] = 8;
  ndArray[1][1][0][1] = 7;
  ndArray[1][1][1][0] = 6;
  ndArray[1][1][1][1] = 5;
  ndArray[2][0][0][0] = 9;
  ndArray[2][0][0][1] = 10;
  ndArray[2][0][1][0] = 11;
  ndArray[2][0][1][1] = 12;
  ndArray[2][1][0][0] = 12;
  ndArray[2][1][0][1] = 11;
  ndArray[2][1][1][0] = 10;
  ndArray[2][1][1][1] = 9;
  ndArray[3][0][0][0] = 13;
  ndArray[3][0][0][1] = 14;
  ndArray[3][0][1][0] = 15;
  ndArray[3][0][1][1] = 16;
  ndArray[3][1][0][0] = 16;
  ndArray[3][1][0][1] = 15;
  ndArray[3][1][1][0] = 14;
  ndArray[3][1][1][1] = 13;

  if (version == 2) {
    ndArray[3][1][1][1] = 17;
  } else if (version == 3) {
    ndArray[2][1][1][0] = 9;
    ndArray[2][1][1][1] = 10;
  }

  return ndArray;
}

/// Builds a 12d array.
///
/// The `version` parameter is used to build different arrays.
/// * `version == 1`: The default array. This is equal to [testList12d].
/// * `version == 2`: This array slightly different from [testList12d].
/// * `version == 3`: This array has the same elements as [testList12d], but in
///   a different order.
NdArray build12dArray([int version = 1]) {
  final NdArray ndArray = NdArray(12);

  ndArray.reshape([1, 1, 2, 1, 2, 2, 2, 3, 2, 1, 2, 3]);

  ndArray[0][0][0][0][0][0][0][0][0][0][0][0] = 1;
  ndArray[0][0][0][0][0][0][0][0][0][0][0][1] = 2;
  ndArray[0][0][0][0][0][0][0][0][0][0][0][2] = 3;
  ndArray[0][0][0][0][0][0][0][0][0][0][1][0] = "a";
  ndArray[0][0][0][0][0][0][0][0][0][0][1][1] = "b";
  ndArray[0][0][0][0][0][0][0][0][0][0][1][2] = "c";
  ndArray[0][0][0][0][0][0][0][0][1][0][0][0] = 4;
  ndArray[0][0][0][0][0][0][0][0][1][0][0][1] = 5;
  ndArray[0][0][0][0][0][0][0][0][1][0][0][2] = 6;
  ndArray[0][0][0][0][0][0][0][0][1][0][1][0] = "d";
  ndArray[0][0][0][0][0][0][0][0][1][0][1][1] = "e";
  ndArray[0][0][0][0][0][0][0][0][1][0][1][2] = "f";
  ndArray[0][0][0][0][0][0][0][1][0][0][0][0] = 7;
  ndArray[0][0][0][0][0][0][0][1][0][0][0][1] = 8;
  ndArray[0][0][0][0][0][0][0][1][0][0][0][2] = 9;
  ndArray[0][0][0][0][0][0][0][1][0][0][1][0] = "g";
  ndArray[0][0][0][0][0][0][0][1][0][0][1][1] = "h";
  ndArray[0][0][0][0][0][0][0][1][0][0][1][2] = "i";
  ndArray[0][0][0][0][0][0][0][1][1][0][0][0] = 10;
  ndArray[0][0][0][0][0][0][0][1][1][0][0][1] = 11;
  ndArray[0][0][0][0][0][0][0][1][1][0][0][2] = 12;
  ndArray[0][0][0][0][0][0][0][1][1][0][1][0] = "j";
  ndArray[0][0][0][0][0][0][0][1][1][0][1][1] = "k";
  ndArray[0][0][0][0][0][0][0][1][1][0][1][2] = "l";
  ndArray[0][0][0][0][0][0][0][2][0][0][0][0] = 13;
  ndArray[0][0][0][0][0][0][0][2][0][0][0][1] = 14;
  ndArray[0][0][0][0][0][0][0][2][0][0][0][2] = 15;
  ndArray[0][0][0][0][0][0][0][2][0][0][1][0] = "m";
  ndArray[0][0][0][0][0][0][0][2][0][0][1][1] = "n";
  ndArray[0][0][0][0][0][0][0][2][0][0][1][2] = "o";
  ndArray[0][0][0][0][0][0][0][2][1][0][0][0] = 16;
  ndArray[0][0][0][0][0][0][0][2][1][0][0][1] = 17;
  ndArray[0][0][0][0][0][0][0][2][1][0][0][2] = 18;
  ndArray[0][0][0][0][0][0][0][2][1][0][1][0] = "p";
  ndArray[0][0][0][0][0][0][0][2][1][0][1][1] = "q";
  ndArray[0][0][0][0][0][0][0][2][1][0][1][2] = "r";
  ndArray[0][0][0][0][0][0][1][0][0][0][0][0] = 19;
  ndArray[0][0][0][0][0][0][1][0][0][0][0][1] = 20;
  ndArray[0][0][0][0][0][0][1][0][0][0][0][2] = 21;
  ndArray[0][0][0][0][0][0][1][0][0][0][1][0] = "s";
  ndArray[0][0][0][0][0][0][1][0][0][0][1][1] = "t";
  ndArray[0][0][0][0][0][0][1][0][0][0][1][2] = "u";
  ndArray[0][0][0][0][0][0][1][0][1][0][0][0] = 22;
  ndArray[0][0][0][0][0][0][1][0][1][0][0][1] = 23;
  ndArray[0][0][0][0][0][0][1][0][1][0][0][2] = 24;
  ndArray[0][0][0][0][0][0][1][0][1][0][1][0] = "v";
  ndArray[0][0][0][0][0][0][1][0][1][0][1][1] = "w";
  ndArray[0][0][0][0][0][0][1][0][1][0][1][2] = "x";
  ndArray[0][0][0][0][0][0][1][1][0][0][0][0] = 25;
  ndArray[0][0][0][0][0][0][1][1][0][0][0][1] = 26;
  ndArray[0][0][0][0][0][0][1][1][0][0][0][2] = 27;
  ndArray[0][0][0][0][0][0][1][1][0][0][1][0] = "y";
  ndArray[0][0][0][0][0][0][1][1][0][0][1][1] = "z";
  ndArray[0][0][0][0][0][0][1][1][0][0][1][2] = "aa";
  ndArray[0][0][0][0][0][0][1][1][1][0][0][0] = 28;
  ndArray[0][0][0][0][0][0][1][1][1][0][0][1] = 29;
  ndArray[0][0][0][0][0][0][1][1][1][0][0][2] = 30;
  ndArray[0][0][0][0][0][0][1][1][1][0][1][0] = "ab";
  ndArray[0][0][0][0][0][0][1][1][1][0][1][1] = "ac";
  ndArray[0][0][0][0][0][0][1][1][1][0][1][2] = "ad";
  ndArray[0][0][0][0][0][0][1][2][0][0][0][0] = 31;
  ndArray[0][0][0][0][0][0][1][2][0][0][0][1] = 32;
  ndArray[0][0][0][0][0][0][1][2][0][0][0][2] = 33;
  ndArray[0][0][0][0][0][0][1][2][0][0][1][0] = "ae";
  ndArray[0][0][0][0][0][0][1][2][0][0][1][1] = "af";
  ndArray[0][0][0][0][0][0][1][2][0][0][1][2] = "ag";
  ndArray[0][0][0][0][0][0][1][2][1][0][0][0] = 34;
  ndArray[0][0][0][0][0][0][1][2][1][0][0][1] = 35;
  ndArray[0][0][0][0][0][0][1][2][1][0][0][2] = 36;
  ndArray[0][0][0][0][0][0][1][2][1][0][1][0] = "ah";
  ndArray[0][0][0][0][0][0][1][2][1][0][1][1] = "ai";
  ndArray[0][0][0][0][0][0][1][2][1][0][1][2] = "aj";
  ndArray[0][0][0][0][0][1][0][0][0][0][0][0] = 37;
  ndArray[0][0][0][0][0][1][0][0][0][0][0][1] = 38;
  ndArray[0][0][0][0][0][1][0][0][0][0][0][2] = 39;
  ndArray[0][0][0][0][0][1][0][0][0][0][1][0] = "ak";
  ndArray[0][0][0][0][0][1][0][0][0][0][1][1] = "al";
  ndArray[0][0][0][0][0][1][0][0][0][0][1][2] = "am";
  ndArray[0][0][0][0][0][1][0][0][1][0][0][0] = 40;
  ndArray[0][0][0][0][0][1][0][0][1][0][0][1] = 41;
  ndArray[0][0][0][0][0][1][0][0][1][0][0][2] = 42;
  ndArray[0][0][0][0][0][1][0][0][1][0][1][0] = "an";
  ndArray[0][0][0][0][0][1][0][0][1][0][1][1] = "ao";
  ndArray[0][0][0][0][0][1][0][0][1][0][1][2] = "ap";
  ndArray[0][0][0][0][0][1][0][1][0][0][0][0] = 43;
  ndArray[0][0][0][0][0][1][0][1][0][0][0][1] = 44;
  ndArray[0][0][0][0][0][1][0][1][0][0][0][2] = 45;
  ndArray[0][0][0][0][0][1][0][1][0][0][1][0] = "aq";
  ndArray[0][0][0][0][0][1][0][1][0][0][1][1] = "ar";
  ndArray[0][0][0][0][0][1][0][1][0][0][1][2] = "as";
  ndArray[0][0][0][0][0][1][0][1][1][0][0][0] = 46;
  ndArray[0][0][0][0][0][1][0][1][1][0][0][1] = 47;
  ndArray[0][0][0][0][0][1][0][1][1][0][0][2] = 48;
  ndArray[0][0][0][0][0][1][0][1][1][0][1][0] = "at";
  ndArray[0][0][0][0][0][1][0][1][1][0][1][1] = "au";
  ndArray[0][0][0][0][0][1][0][1][1][0][1][2] = "av";
  ndArray[0][0][0][0][0][1][0][2][0][0][0][0] = 49;
  ndArray[0][0][0][0][0][1][0][2][0][0][0][1] = 50;
  ndArray[0][0][0][0][0][1][0][2][0][0][0][2] = 51;
  ndArray[0][0][0][0][0][1][0][2][0][0][1][0] = "aw";
  ndArray[0][0][0][0][0][1][0][2][0][0][1][1] = "ax";
  ndArray[0][0][0][0][0][1][0][2][0][0][1][2] = "ay";
  ndArray[0][0][0][0][0][1][0][2][1][0][0][0] = 52;
  ndArray[0][0][0][0][0][1][0][2][1][0][0][1] = 53;
  ndArray[0][0][0][0][0][1][0][2][1][0][0][2] = 54;
  ndArray[0][0][0][0][0][1][0][2][1][0][1][0] = "az";
  ndArray[0][0][0][0][0][1][0][2][1][0][1][1] = "ba";
  ndArray[0][0][0][0][0][1][0][2][1][0][1][2] = "bb";
  ndArray[0][0][0][0][0][1][1][0][0][0][0][0] = 55;
  ndArray[0][0][0][0][0][1][1][0][0][0][0][1] = 56;
  ndArray[0][0][0][0][0][1][1][0][0][0][0][2] = 57;
  ndArray[0][0][0][0][0][1][1][0][0][0][1][0] = "bc";
  ndArray[0][0][0][0][0][1][1][0][0][0][1][1] = "bd";
  ndArray[0][0][0][0][0][1][1][0][0][0][1][2] = "be";
  ndArray[0][0][0][0][0][1][1][0][1][0][0][0] = 58;
  ndArray[0][0][0][0][0][1][1][0][1][0][0][1] = 59;
  ndArray[0][0][0][0][0][1][1][0][1][0][0][2] = 60;
  ndArray[0][0][0][0][0][1][1][0][1][0][1][0] = "bf";
  ndArray[0][0][0][0][0][1][1][0][1][0][1][1] = "bg";
  ndArray[0][0][0][0][0][1][1][0][1][0][1][2] = "bh";
  ndArray[0][0][0][0][0][1][1][1][0][0][0][0] = 61;
  ndArray[0][0][0][0][0][1][1][1][0][0][0][1] = 62;
  ndArray[0][0][0][0][0][1][1][1][0][0][0][2] = 63;
  ndArray[0][0][0][0][0][1][1][1][0][0][1][0] = "bi";
  ndArray[0][0][0][0][0][1][1][1][0][0][1][1] = "bj";
  ndArray[0][0][0][0][0][1][1][1][0][0][1][2] = "bk";
  ndArray[0][0][0][0][0][1][1][1][1][0][0][0] = 64;
  ndArray[0][0][0][0][0][1][1][1][1][0][0][1] = 65;
  ndArray[0][0][0][0][0][1][1][1][1][0][0][2] = 66;
  ndArray[0][0][0][0][0][1][1][1][1][0][1][0] = "bl";
  ndArray[0][0][0][0][0][1][1][1][1][0][1][1] = "bm";
  ndArray[0][0][0][0][0][1][1][1][1][0][1][2] = "bn";
  ndArray[0][0][0][0][0][1][1][2][0][0][0][0] = 67;
  ndArray[0][0][0][0][0][1][1][2][0][0][0][1] = 68;
  ndArray[0][0][0][0][0][1][1][2][0][0][0][2] = 69;
  ndArray[0][0][0][0][0][1][1][2][0][0][1][0] = "bo";
  ndArray[0][0][0][0][0][1][1][2][0][0][1][1] = "bp";
  ndArray[0][0][0][0][0][1][1][2][0][0][1][2] = "bq";
  ndArray[0][0][0][0][0][1][1][2][1][0][0][0] = 70;
  ndArray[0][0][0][0][0][1][1][2][1][0][0][1] = 71;
  ndArray[0][0][0][0][0][1][1][2][1][0][0][2] = 72;
  ndArray[0][0][0][0][0][1][1][2][1][0][1][0] = "br";
  ndArray[0][0][0][0][0][1][1][2][1][0][1][1] = "bs";
  ndArray[0][0][0][0][0][1][1][2][1][0][1][2] = "bt";
  ndArray[0][0][0][0][1][0][0][0][0][0][0][0] = 73;
  ndArray[0][0][0][0][1][0][0][0][0][0][0][1] = 74;
  ndArray[0][0][0][0][1][0][0][0][0][0][0][2] = 75;
  ndArray[0][0][0][0][1][0][0][0][0][0][1][0] = "bu";
  ndArray[0][0][0][0][1][0][0][0][0][0][1][1] = "bv";
  ndArray[0][0][0][0][1][0][0][0][0][0][1][2] = "bw";
  ndArray[0][0][0][0][1][0][0][0][1][0][0][0] = 76;
  ndArray[0][0][0][0][1][0][0][0][1][0][0][1] = 77;
  ndArray[0][0][0][0][1][0][0][0][1][0][0][2] = 78;
  ndArray[0][0][0][0][1][0][0][0][1][0][1][0] = "bx";
  ndArray[0][0][0][0][1][0][0][0][1][0][1][1] = "by";
  ndArray[0][0][0][0][1][0][0][0][1][0][1][2] = "bz";
  ndArray[0][0][0][0][1][0][0][1][0][0][0][0] = 79;
  ndArray[0][0][0][0][1][0][0][1][0][0][0][1] = 80;
  ndArray[0][0][0][0][1][0][0][1][0][0][0][2] = 81;
  ndArray[0][0][0][0][1][0][0][1][0][0][1][0] = "ca";
  ndArray[0][0][0][0][1][0][0][1][0][0][1][1] = "cb";
  ndArray[0][0][0][0][1][0][0][1][0][0][1][2] = "cc";
  ndArray[0][0][0][0][1][0][0][1][1][0][0][0] = 82;
  ndArray[0][0][0][0][1][0][0][1][1][0][0][1] = 83;
  ndArray[0][0][0][0][1][0][0][1][1][0][0][2] = 84;
  ndArray[0][0][0][0][1][0][0][1][1][0][1][0] = "cd";
  ndArray[0][0][0][0][1][0][0][1][1][0][1][1] = "ce";
  ndArray[0][0][0][0][1][0][0][1][1][0][1][2] = "cf";
  ndArray[0][0][0][0][1][0][0][2][0][0][0][0] = 85;
  ndArray[0][0][0][0][1][0][0][2][0][0][0][1] = 86;
  ndArray[0][0][0][0][1][0][0][2][0][0][0][2] = 87;
  ndArray[0][0][0][0][1][0][0][2][0][0][1][0] = "cg";
  ndArray[0][0][0][0][1][0][0][2][0][0][1][1] = "ch";
  ndArray[0][0][0][0][1][0][0][2][0][0][1][2] = "ci";
  ndArray[0][0][0][0][1][0][0][2][1][0][0][0] = 88;
  ndArray[0][0][0][0][1][0][0][2][1][0][0][1] = 89;
  ndArray[0][0][0][0][1][0][0][2][1][0][0][2] = 90;
  ndArray[0][0][0][0][1][0][0][2][1][0][1][0] = "cj";
  ndArray[0][0][0][0][1][0][0][2][1][0][1][1] = "ck";
  ndArray[0][0][0][0][1][0][0][2][1][0][1][2] = "cl";
  ndArray[0][0][0][0][1][0][1][0][0][0][0][0] = 91;
  ndArray[0][0][0][0][1][0][1][0][0][0][0][1] = 92;
  ndArray[0][0][0][0][1][0][1][0][0][0][0][2] = 93;
  ndArray[0][0][0][0][1][0][1][0][0][0][1][0] = "cm";
  ndArray[0][0][0][0][1][0][1][0][0][0][1][1] = "cn";
  ndArray[0][0][0][0][1][0][1][0][0][0][1][2] = "co";
  ndArray[0][0][0][0][1][0][1][0][1][0][0][0] = 95;
  ndArray[0][0][0][0][1][0][1][0][1][0][0][1] = 95;
  ndArray[0][0][0][0][1][0][1][0][1][0][0][2] = 96;
  ndArray[0][0][0][0][1][0][1][0][1][0][1][0] = "cp";
  ndArray[0][0][0][0][1][0][1][0][1][0][1][1] = "cq";
  ndArray[0][0][0][0][1][0][1][0][1][0][1][2] = "cr";
  ndArray[0][0][0][0][1][0][1][1][0][0][0][0] = 97;
  ndArray[0][0][0][0][1][0][1][1][0][0][0][1] = 98;
  ndArray[0][0][0][0][1][0][1][1][0][0][0][2] = 99;
  ndArray[0][0][0][0][1][0][1][1][0][0][1][0] = "cs";
  ndArray[0][0][0][0][1][0][1][1][0][0][1][1] = "ct";
  ndArray[0][0][0][0][1][0][1][1][0][0][1][2] = "cu";
  ndArray[0][0][0][0][1][0][1][1][1][0][0][0] = 100;
  ndArray[0][0][0][0][1][0][1][1][1][0][0][1] = 101;
  ndArray[0][0][0][0][1][0][1][1][1][0][0][2] = 102;
  ndArray[0][0][0][0][1][0][1][1][1][0][1][0] = "cv";
  ndArray[0][0][0][0][1][0][1][1][1][0][1][1] = "cw";
  ndArray[0][0][0][0][1][0][1][1][1][0][1][2] = "cx";
  ndArray[0][0][0][0][1][0][1][2][0][0][0][0] = 103;
  ndArray[0][0][0][0][1][0][1][2][0][0][0][1] = 104;
  ndArray[0][0][0][0][1][0][1][2][0][0][0][2] = 105;
  ndArray[0][0][0][0][1][0][1][2][0][0][1][0] = "cy";
  ndArray[0][0][0][0][1][0][1][2][0][0][1][1] = "cz";
  ndArray[0][0][0][0][1][0][1][2][0][0][1][2] = "da";
  ndArray[0][0][0][0][1][0][1][2][1][0][0][0] = 106;
  ndArray[0][0][0][0][1][0][1][2][1][0][0][1] = 107;
  ndArray[0][0][0][0][1][0][1][2][1][0][0][2] = 108;
  ndArray[0][0][0][0][1][0][1][2][1][0][1][0] = "db";
  ndArray[0][0][0][0][1][0][1][2][1][0][1][1] = "dc";
  ndArray[0][0][0][0][1][0][1][2][1][0][1][2] = "dd";
  ndArray[0][0][0][0][1][1][0][0][0][0][0][0] = 109;
  ndArray[0][0][0][0][1][1][0][0][0][0][0][1] = 110;
  ndArray[0][0][0][0][1][1][0][0][0][0][0][2] = 111;
  ndArray[0][0][0][0][1][1][0][0][0][0][1][0] = "de";
  ndArray[0][0][0][0][1][1][0][0][0][0][1][1] = "df";
  ndArray[0][0][0][0][1][1][0][0][0][0][1][2] = "dg";
  ndArray[0][0][0][0][1][1][0][0][1][0][0][0] = 112;
  ndArray[0][0][0][0][1][1][0][0][1][0][0][1] = 113;
  ndArray[0][0][0][0][1][1][0][0][1][0][0][2] = 114;
  ndArray[0][0][0][0][1][1][0][0][1][0][1][0] = "dh";
  ndArray[0][0][0][0][1][1][0][0][1][0][1][1] = "di";
  ndArray[0][0][0][0][1][1][0][0][1][0][1][2] = "dj";
  ndArray[0][0][0][0][1][1][0][1][0][0][0][0] = 115;
  ndArray[0][0][0][0][1][1][0][1][0][0][0][1] = 116;
  ndArray[0][0][0][0][1][1][0][1][0][0][0][2] = 117;
  ndArray[0][0][0][0][1][1][0][1][0][0][1][0] = "dk";
  ndArray[0][0][0][0][1][1][0][1][0][0][1][1] = "dl";
  ndArray[0][0][0][0][1][1][0][1][0][0][1][2] = "dm";
  ndArray[0][0][0][0][1][1][0][1][1][0][0][0] = 118;
  ndArray[0][0][0][0][1][1][0][1][1][0][0][1] = 119;
  ndArray[0][0][0][0][1][1][0][1][1][0][0][2] = 120;
  ndArray[0][0][0][0][1][1][0][1][1][0][1][0] = "dn";
  ndArray[0][0][0][0][1][1][0][1][1][0][1][1] = "do";
  ndArray[0][0][0][0][1][1][0][1][1][0][1][2] = "dp";
  ndArray[0][0][0][0][1][1][0][2][0][0][0][0] = 121;
  ndArray[0][0][0][0][1][1][0][2][0][0][0][1] = 122;
  ndArray[0][0][0][0][1][1][0][2][0][0][0][2] = 123;
  ndArray[0][0][0][0][1][1][0][2][0][0][1][0] = "dq";
  ndArray[0][0][0][0][1][1][0][2][0][0][1][1] = "dr";
  ndArray[0][0][0][0][1][1][0][2][0][0][1][2] = "ds";
  ndArray[0][0][0][0][1][1][0][2][1][0][0][0] = 124;
  ndArray[0][0][0][0][1][1][0][2][1][0][0][1] = 125;
  ndArray[0][0][0][0][1][1][0][2][1][0][0][2] = 126;
  ndArray[0][0][0][0][1][1][0][2][1][0][1][0] = "dt";
  ndArray[0][0][0][0][1][1][0][2][1][0][1][1] = "du";
  ndArray[0][0][0][0][1][1][0][2][1][0][1][2] = "dv";
  ndArray[0][0][0][0][1][1][1][0][0][0][0][0] = 127;
  ndArray[0][0][0][0][1][1][1][0][0][0][0][1] = 128;
  ndArray[0][0][0][0][1][1][1][0][0][0][0][2] = 129;
  ndArray[0][0][0][0][1][1][1][0][0][0][1][0] = "dw";
  ndArray[0][0][0][0][1][1][1][0][0][0][1][1] = "dx";
  ndArray[0][0][0][0][1][1][1][0][0][0][1][2] = "dy";
  ndArray[0][0][0][0][1][1][1][0][1][0][0][0] = 130;
  ndArray[0][0][0][0][1][1][1][0][1][0][0][1] = 131;
  ndArray[0][0][0][0][1][1][1][0][1][0][0][2] = 132;
  ndArray[0][0][0][0][1][1][1][0][1][0][1][0] = "dz";
  ndArray[0][0][0][0][1][1][1][0][1][0][1][1] = "ea";
  ndArray[0][0][0][0][1][1][1][0][1][0][1][2] = "eb";
  ndArray[0][0][0][0][1][1][1][1][0][0][0][0] = 133;
  ndArray[0][0][0][0][1][1][1][1][0][0][0][1] = 134;
  ndArray[0][0][0][0][1][1][1][1][0][0][0][2] = 135;
  ndArray[0][0][0][0][1][1][1][1][0][0][1][0] = "ec";
  ndArray[0][0][0][0][1][1][1][1][0][0][1][1] = "ed";
  ndArray[0][0][0][0][1][1][1][1][0][0][1][2] = "ee";
  ndArray[0][0][0][0][1][1][1][1][1][0][0][0] = 136;
  ndArray[0][0][0][0][1][1][1][1][1][0][0][1] = 137;
  ndArray[0][0][0][0][1][1][1][1][1][0][0][2] = 138;
  ndArray[0][0][0][0][1][1][1][1][1][0][1][0] = "ef";
  ndArray[0][0][0][0][1][1][1][1][1][0][1][1] = "eg";
  ndArray[0][0][0][0][1][1][1][1][1][0][1][2] = "eh";
  ndArray[0][0][0][0][1][1][1][2][0][0][0][0] = 139;
  ndArray[0][0][0][0][1][1][1][2][0][0][0][1] = 140;
  ndArray[0][0][0][0][1][1][1][2][0][0][0][2] = 141;
  ndArray[0][0][0][0][1][1][1][2][0][0][1][0] = "ei";
  ndArray[0][0][0][0][1][1][1][2][0][0][1][1] = "ej";
  ndArray[0][0][0][0][1][1][1][2][0][0][1][2] = "ek";
  ndArray[0][0][0][0][1][1][1][2][1][0][0][0] = 142;
  ndArray[0][0][0][0][1][1][1][2][1][0][0][1] = 143;
  ndArray[0][0][0][0][1][1][1][2][1][0][0][2] = 144;
  ndArray[0][0][0][0][1][1][1][2][1][0][1][0] = "el";
  ndArray[0][0][0][0][1][1][1][2][1][0][1][1] = "em";
  ndArray[0][0][0][0][1][1][1][2][1][0][1][2] = "en";
  ndArray[0][0][1][0][0][0][0][0][0][0][0][0] = 6523;
  ndArray[0][0][1][0][0][0][0][0][0][0][0][1] = 65;
  ndArray[0][0][1][0][0][0][0][0][0][0][0][2] = 143;
  ndArray[0][0][1][0][0][0][0][0][0][0][1][0] = "hjkDhg";
  ndArray[0][0][1][0][0][0][0][0][0][0][1][1] = "ghg4hb";
  ndArray[0][0][1][0][0][0][0][0][0][0][1][2] = "gui6r7";
  ndArray[0][0][1][0][0][0][0][0][1][0][0][0] = 563;
  ndArray[0][0][1][0][0][0][0][0][1][0][0][1] = 73;
  ndArray[0][0][1][0][0][0][0][0][1][0][0][2] = 537;
  ndArray[0][0][1][0][0][0][0][0][1][0][1][0] = "bsd6f546";
  ndArray[0][0][1][0][0][0][0][0][1][0][1][1] = "DF^YH";
  ndArray[0][0][1][0][0][0][0][0][1][0][1][2] = "fddDfa";
  ndArray[0][0][1][0][0][0][0][1][0][0][0][0] = 735;
  ndArray[0][0][1][0][0][0][0][1][0][0][0][1] = 573;
  ndArray[0][0][1][0][0][0][0][1][0][0][0][2] = 753;
  ndArray[0][0][1][0][0][0][0][1][0][0][1][0] = "g";
  ndArray[0][0][1][0][0][0][0][1][0][0][1][1] = "h";
  ndArray[0][0][1][0][0][0][0][1][0][0][1][2] = "i";
  ndArray[0][0][1][0][0][0][0][1][1][0][0][0] = 45677;
  ndArray[0][0][1][0][0][0][0][1][1][0][0][1] = 98;
  ndArray[0][0][1][0][0][0][0][1][1][0][0][2] = 16572;
  ndArray[0][0][1][0][0][0][0][1][1][0][1][0] = "j";
  ndArray[0][0][1][0][0][0][0][1][1][0][1][1] = "k";
  ndArray[0][0][1][0][0][0][0][1][1][0][1][2] = "l";
  ndArray[0][0][1][0][0][0][0][2][0][0][0][0] = 1356;
  ndArray[0][0][1][0][0][0][0][2][0][0][0][1] = 24;
  ndArray[0][0][1][0][0][0][0][2][0][0][0][2] = 5715;
  ndArray[0][0][1][0][0][0][0][2][0][0][1][0] = "asDdDdGfm";
  ndArray[0][0][1][0][0][0][0][2][0][0][1][1] = "ndfSdf";
  ndArray[0][0][1][0][0][0][0][2][0][0][1][2] = "oDFD";
  ndArray[0][0][1][0][0][0][0][2][1][0][0][0] = 54673;
  ndArray[0][0][1][0][0][0][0][2][1][0][0][1] = 3456;
  ndArray[0][0][1][0][0][0][0][2][1][0][0][2] = 55;
  ndArray[0][0][1][0][0][0][0][2][1][0][1][0] = "kDk fRjd";
  ndArray[0][0][1][0][0][0][0][2][1][0][1][1] = "q d";
  ndArray[0][0][1][0][0][0][0][2][1][0][1][2] = "rdgGfdDad";
  ndArray[0][0][1][0][0][0][1][0][0][0][0][0] = 56356;
  ndArray[0][0][1][0][0][0][1][0][0][0][0][1] = 55;
  ndArray[0][0][1][0][0][0][1][0][0][0][0][2] = 457;
  ndArray[0][0][1][0][0][0][1][0][0][0][1][0] = "sd";
  ndArray[0][0][1][0][0][0][1][0][0][0][1][1] = "te";
  ndArray[0][0][1][0][0][0][1][0][0][0][1][2] = "ude";
  ndArray[0][0][1][0][0][0][1][0][1][0][0][0] = 22;
  ndArray[0][0][1][0][0][0][1][0][1][0][0][1] = 23;
  ndArray[0][0][1][0][0][0][1][0][1][0][0][2] = 24;
  ndArray[0][0][1][0][0][0][1][0][1][0][1][0] = "vDdfFg";
  ndArray[0][0][1][0][0][0][1][0][1][0][1][1] = "wsd";
  ndArray[0][0][1][0][0][0][1][0][1][0][1][2] = "xfe";
  ndArray[0][0][1][0][0][0][1][1][0][0][0][0] = 1234;
  ndArray[0][0][1][0][0][0][1][1][0][0][0][1] = 52;
  ndArray[0][0][1][0][0][0][1][1][0][0][0][2] = 99705;
  ndArray[0][0][1][0][0][0][1][1][0][0][1][0] = "yDFfGfZds";
  ndArray[0][0][1][0][0][0][1][1][0][0][1][1] = "zDFe";
  ndArray[0][0][1][0][0][0][1][1][0][0][1][2] = "aa";
  ndArray[0][0][1][0][0][0][1][1][1][0][0][0] = 462;
  ndArray[0][0][1][0][0][0][1][1][1][0][0][1] = 727;
  ndArray[0][0][1][0][0][0][1][1][1][0][0][2] = 8382;
  ndArray[0][0][1][0][0][0][1][1][1][0][1][0] = "ab";
  ndArray[0][0][1][0][0][0][1][1][1][0][1][1] = "H";
  ndArray[0][0][1][0][0][0][1][1][1][0][1][2] = "ht";
  ndArray[0][0][1][0][0][0][1][2][0][0][0][0] = 563457;
  ndArray[0][0][1][0][0][0][1][2][0][0][0][1] = 24;
  ndArray[0][0][1][0][0][0][1][2][0][0][0][2] = 757247;
  ndArray[0][0][1][0][0][0][1][2][0][0][1][0] = "M";
  ndArray[0][0][1][0][0][0][1][2][0][0][1][1] = "M";
  ndArray[0][0][1][0][0][0][1][2][0][0][1][2] = "M";
  ndArray[0][0][1][0][0][0][1][2][1][0][0][0] = 6727;
  ndArray[0][0][1][0][0][0][1][2][1][0][0][1] = 3411;
  ndArray[0][0][1][0][0][0][1][2][1][0][0][2] = 3478900;
  ndArray[0][0][1][0][0][0][1][2][1][0][1][0] = "a5asd5ty";
  ndArray[0][0][1][0][0][0][1][2][1][0][1][1] = "ert7usj5";
  ndArray[0][0][1][0][0][0][1][2][1][0][1][2] = "dfrDn56";
  ndArray[0][0][1][0][0][1][0][0][0][0][0][0] = 5892;
  ndArray[0][0][1][0][0][1][0][0][0][0][0][1] = 2002;
  ndArray[0][0][1][0][0][1][0][0][0][0][0][2] = 1003367;
  ndArray[0][0][1][0][0][1][0][0][0][0][1][0] = "aBka0y4";
  ndArray[0][0][1][0][0][1][0][0][0][0][1][1] = "a5l";
  ndArray[0][0][1][0][0][1][0][0][0][0][1][2] = "am";
  ndArray[0][0][1][0][0][1][0][0][1][0][0][0] = 452728;
  ndArray[0][0][1][0][0][1][0][0][1][0][0][1] = 66;
  ndArray[0][0][1][0][0][1][0][0][1][0][0][2] = 84838;
  ndArray[0][0][1][0][0][1][0][0][1][0][1][0] = "df  an";
  ndArray[0][0][1][0][0][1][0][0][1][0][1][1] = "HR r g v d";
  ndArray[0][0][1][0][0][1][0][0][1][0][1][2] = "adfFDp";
  ndArray[0][0][1][0][0][1][0][1][0][0][0][0] = 58383;
  ndArray[0][0][1][0][0][1][0][1][0][0][0][1] = 2244;
  ndArray[0][0][1][0][0][1][0][1][0][0][0][2] = 55;
  ndArray[0][0][1][0][0][1][0][1][0][0][1][0] = "asq";
  ndArray[0][0][1][0][0][1][0][1][0][0][1][1] = "a4r";
  ndArray[0][0][1][0][0][1][0][1][0][0][1][2] = "ah5s";
  ndArray[0][0][1][0][0][1][0][1][1][0][0][0] = 1;
  ndArray[0][0][1][0][0][1][0][1][1][0][0][1] = 922458;
  ndArray[0][0][1][0][0][1][0][1][1][0][0][2] = 65004;
  ndArray[0][0][1][0][0][1][0][1][1][0][1][0] = "a4z6t";
  ndArray[0][0][1][0][0][1][0][1][1][0][1][1] = "a4nau";
  ndArray[0][0][1][0][0][1][0][1][1][0][1][2] = "n4at";
  ndArray[0][0][1][0][0][1][0][2][0][0][0][0] = 30038;
  ndArray[0][0][1][0][0][1][0][2][0][0][0][1] = 151;
  ndArray[0][0][1][0][0][1][0][2][0][0][0][2] = -9;
  ndArray[0][0][1][0][0][1][0][2][0][0][1][0] = "zn46564n4";
  ndArray[0][0][1][0][0][1][0][2][0][0][1][1] = "asd5a5";
  ndArray[0][0][1][0][0][1][0][2][0][0][1][2] = " ver  w ";
  ndArray[0][0][1][0][0][1][0][2][1][0][0][0] = 2345267;
  ndArray[0][0][1][0][0][1][0][2][1][0][0][1] = 44;
  ndArray[0][0][1][0][0][1][0][2][1][0][0][2] = 11677;
  ndArray[0][0][1][0][0][1][0][2][1][0][1][0] = "aDE%^z";
  ndArray[0][0][1][0][0][1][0][2][1][0][1][1] = "D%N";
  ndArray[0][0][1][0][0][1][0][2][1][0][1][2] =
      "[0][0][1][0][0][1][0][2][1][0][1][2]";
  ndArray[0][0][1][0][0][1][1][0][0][0][0][0] = 4771;
  ndArray[0][0][1][0][0][1][1][0][0][0][0][1] = 557;
  ndArray[0][0][1][0][0][1][1][0][0][0][0][2] = 15 - 7;
  ndArray[0][0][1][0][0][1][1][0][0][0][1][0] = "s4";
  ndArray[0][0][1][0][0][1][1][0][0][0][1][1] = "a";
  ndArray[0][0][1][0][0][1][1][0][0][0][1][2] = "b";
  ndArray[0][0][1][0][0][1][1][0][1][0][0][0] = 179356;
  ndArray[0][0][1][0][0][1][1][0][1][0][0][1] = 4476;
  ndArray[0][0][1][0][0][1][1][0][1][0][0][2] = 0;
  ndArray[0][0][1][0][0][1][1][0][1][0][1][0] = "c";
  ndArray[0][0][1][0][0][1][1][0][1][0][1][1] = "d";
  ndArray[0][0][1][0][0][1][1][0][1][0][1][2] = "e";
  ndArray[0][0][1][0][0][1][1][1][0][0][0][0] = 477;
  ndArray[0][0][1][0][0][1][1][1][0][0][0][1] = 6627;
  ndArray[0][0][1][0][0][1][1][1][0][0][0][2] = 44;
  ndArray[0][0][1][0][0][1][1][1][0][0][1][0] = "f";
  ndArray[0][0][1][0][0][1][1][1][0][0][1][1] = "g";
  ndArray[0][0][1][0][0][1][1][1][0][0][1][2] = "z";
  ndArray[0][0][1][0][0][1][1][1][1][0][0][0] = 45267;
  ndArray[0][0][1][0][0][1][1][1][1][0][0][1] = 756;
  ndArray[0][0][1][0][0][1][1][1][1][0][0][2] = 4472714;
  ndArray[0][0][1][0][0][1][1][1][1][0][1][0] = "y";
  ndArray[0][0][1][0][0][1][1][1][1][0][1][1] = "x";
  ndArray[0][0][1][0][0][1][1][1][1][0][1][2] = "w";
  ndArray[0][0][1][0][0][1][1][2][0][0][0][0] = 46727;
  ndArray[0][0][1][0][0][1][1][2][0][0][0][1] = 68;
  ndArray[0][0][1][0][0][1][1][2][0][0][0][2] = 457;
  ndArray[0][0][1][0][0][1][1][2][0][0][1][0] = "boo";
  ndArray[0][0][1][0][0][1][1][2][0][0][1][1] = "ae43";
  ndArray[0][0][1][0][0][1][1][2][0][0][1][2] = "asd fa sd4";
  ndArray[0][0][1][0][0][1][1][2][1][0][0][0] = 3;
  ndArray[0][0][1][0][0][1][1][2][1][0][0][1] = 6727;
  ndArray[0][0][1][0][0][1][1][2][1][0][0][2] = 5672;
  ndArray[0][0][1][0][0][1][1][2][1][0][1][0] = "bra sd";
  ndArray[0][0][1][0][0][1][1][2][1][0][1][1] = "k4789d3 klGud 83 s";
  ndArray[0][0][1][0][0][1][1][2][1][0][1][2] = "bt";
  ndArray[0][0][1][0][1][0][0][0][0][0][0][0] = 745;
  ndArray[0][0][1][0][1][0][0][0][0][0][0][1] = 5;
  ndArray[0][0][1][0][1][0][0][0][0][0][0][2] = 5;
  ndArray[0][0][1][0][1][0][0][0][0][0][1][0] = "df4h5 f";
  ndArray[0][0][1][0][1][0][0][0][0][0][1][1] = "d r443 s";
  ndArray[0][0][1][0][1][0][0][0][0][0][1][2] = "bw";
  ndArray[0][0][1][0][1][0][0][0][1][0][0][0] = 74;
  ndArray[0][0][1][0][1][0][0][0][1][0][0][1] = 74;
  ndArray[0][0][1][0][1][0][0][0][1][0][0][2] = 74;
  ndArray[0][0][1][0][1][0][0][0][1][0][1][0] = "bx";
  ndArray[0][0][1][0][1][0][0][0][1][0][1][1] = "sd 4 46";
  ndArray[0][0][1][0][1][0][0][0][1][0][1][2] = "bz";
  ndArray[0][0][1][0][1][0][0][1][0][0][0][0] = 74;
  ndArray[0][0][1][0][1][0][0][1][0][0][0][1] = 74;
  ndArray[0][0][1][0][1][0][0][1][0][0][0][2] = 74;
  ndArray[0][0][1][0][1][0][0][1][0][0][1][0] = "ca";
  ndArray[0][0][1][0][1][0][0][1][0][0][1][1] = "cb";
  ndArray[0][0][1][0][1][0][0][1][0][0][1][2] = "7hw46 ga def";
  ndArray[0][0][1][0][1][0][0][1][1][0][0][0] = 9823;
  ndArray[0][0][1][0][1][0][0][1][1][0][0][1] = 823822;
  ndArray[0][0][1][0][1][0][0][1][1][0][0][2] = 828;
  ndArray[0][0][1][0][1][0][0][1][1][0][1][0] = "cd";
  ndArray[0][0][1][0][1][0][0][1][1][0][1][1] = "a  t3 ds";
  ndArray[0][0][1][0][1][0][0][1][1][0][1][2] = "cf";
  ndArray[0][0][1][0][1][0][0][2][0][0][0][0] = 7345;
  ndArray[0][0][1][0][1][0][0][2][0][0][0][1] = 1345;
  ndArray[0][0][1][0][1][0][0][2][0][0][0][2] = 4145;
  ndArray[0][0][1][0][1][0][0][2][0][0][1][0] = "a45r sd";
  ndArray[0][0][1][0][1][0][0][2][0][0][1][1] = "d4frh";
  ndArray[0][0][1][0][1][0][0][2][0][0][1][2] = "asdf a4sdf 4asd6f d";
  ndArray[0][0][1][0][1][0][0][2][1][0][0][0] = 5789;
  ndArray[0][0][1][0][1][0][0][2][1][0][0][1] = 775;
  ndArray[0][0][1][0][1][0][0][2][1][0][0][2] = 789;
  ndArray[0][0][1][0][1][0][0][2][1][0][1][0] =
      "g>hkr    .r 35  4 5ht,,r.brt d";
  ndArray[0][0][1][0][1][0][0][2][1][0][1][1] = "f";
  ndArray[0][0][1][0][1][0][0][2][1][0][1][2] = "gs45";
  ndArray[0][0][1][0][1][0][1][0][0][0][0][0] = 7823;
  ndArray[0][0][1][0][1][0][1][0][0][0][0][1] = 92;
  ndArray[0][0][1][0][1][0][1][0][0][0][0][2] = 45672;
  ndArray[0][0][1][0][1][0][1][0][0][0][1][0] = "cm";
  ndArray[0][0][1][0][1][0][1][0][0][0][1][1] = "cn";
  ndArray[0][0][1][0][1][0][1][0][0][0][1][2] = "co";
  ndArray[0][0][1][0][1][0][1][0][1][0][0][0] = 95;
  ndArray[0][0][1][0][1][0][1][0][1][0][0][1] = 95;
  ndArray[0][0][1][0][1][0][1][0][1][0][0][2] = 96;
  ndArray[0][0][1][0][1][0][1][0][1][0][1][0] = "cp";
  ndArray[0][0][1][0][1][0][1][0][1][0][1][1] = "cq";
  ndArray[0][0][1][0][1][0][1][0][1][0][1][2] = "cr";
  ndArray[0][0][1][0][1][0][1][1][0][0][0][0] = 461;
  ndArray[0][0][1][0][1][0][1][1][0][0][0][1] = 98;
  ndArray[0][0][1][0][1][0][1][1][0][0][0][2] = 44;
  ndArray[0][0][1][0][1][0][1][1][0][0][1][0] = "cs";
  ndArray[0][0][1][0][1][0][1][1][0][0][1][1] = "ct";
  ndArray[0][0][1][0][1][0][1][1][0][0][1][2] = "cu";
  ndArray[0][0][1][0][1][0][1][1][1][0][0][0] = 111;
  ndArray[0][0][1][0][1][0][1][1][1][0][0][1] = 4564;
  ndArray[0][0][1][0][1][0][1][1][1][0][0][2] = 789;
  ndArray[0][0][1][0][1][0][1][1][1][0][1][0] = "cv";
  ndArray[0][0][1][0][1][0][1][1][1][0][1][1] = "cw";
  ndArray[0][0][1][0][1][0][1][1][1][0][1][2] = "cx";
  ndArray[0][0][1][0][1][0][1][2][0][0][0][0] = 88;
  ndArray[0][0][1][0][1][0][1][2][0][0][0][1] = 4564;
  ndArray[0][0][1][0][1][0][1][2][0][0][0][2] = 87789;
  ndArray[0][0][1][0][1][0][1][2][0][0][1][0] = "cy";
  ndArray[0][0][1][0][1][0][1][2][0][0][1][1] = "cz";
  ndArray[0][0][1][0][1][0][1][2][0][0][1][2] = "da";
  ndArray[0][0][1][0][1][0][1][2][1][0][0][0] = 17096;
  ndArray[0][0][1][0][1][0][1][2][1][0][0][1] = 107787;
  ndArray[0][0][1][0][1][0][1][2][1][0][0][2] = 1058;
  ndArray[0][0][1][0][1][0][1][2][1][0][1][0] = "db";
  ndArray[0][0][1][0][1][0][1][2][1][0][1][1] = "dc";
  ndArray[0][0][1][0][1][0][1][2][1][0][1][2] = "dd";
  ndArray[0][0][1][0][1][1][0][0][0][0][0][0] = 4527;
  ndArray[0][0][1][0][1][1][0][0][0][0][0][1] = 44;
  ndArray[0][0][1][0][1][1][0][0][0][0][0][2] = 775;
  ndArray[0][0][1][0][1][1][0][0][0][0][1][0] = "de";
  ndArray[0][0][1][0][1][1][0][0][0][0][1][1] = "df";
  ndArray[0][0][1][0][1][1][0][0][0][0][1][2] = "dg";
  ndArray[0][0][1][0][1][1][0][0][1][0][0][0] = 5821;
  ndArray[0][0][1][0][1][1][0][0][1][0][0][1] = 457;
  ndArray[0][0][1][0][1][1][0][0][1][0][0][2] = 42;
  ndArray[0][0][1][0][1][1][0][0][1][0][1][0] = "dh";
  ndArray[0][0][1][0][1][1][0][0][1][0][1][1] = "di";
  ndArray[0][0][1][0][1][1][0][0][1][0][1][2] = "dj";
  ndArray[0][0][1][0][1][1][0][1][0][0][0][0] = 79034;
  ndArray[0][0][1][0][1][1][0][1][0][0][0][1] = 2457098;
  ndArray[0][0][1][0][1][1][0][1][0][0][0][2] = 1000001;
  ndArray[0][0][1][0][1][1][0][1][0][0][1][0] = "dk";
  ndArray[0][0][1][0][1][1][0][1][0][0][1][1] = "dl";
  ndArray[0][0][1][0][1][1][0][1][0][0][1][2] = "dm";
  ndArray[0][0][1][0][1][1][0][1][1][0][0][0] = 468345;
  ndArray[0][0][1][0][1][1][0][1][1][0][0][1] = 23462;
  ndArray[0][0][1][0][1][1][0][1][1][0][0][2] = 678;
  ndArray[0][0][1][0][1][1][0][1][1][0][1][0] = "dn";
  ndArray[0][0][1][0][1][1][0][1][1][0][1][1] = "do";
  ndArray[0][0][1][0][1][1][0][1][1][0][1][2] = "dp";
  ndArray[0][0][1][0][1][1][0][2][0][0][0][0] = 12;
  ndArray[0][0][1][0][1][1][0][2][0][0][0][1] = 457;
  ndArray[0][0][1][0][1][1][0][2][0][0][0][2] = 12;
  ndArray[0][0][1][0][1][1][0][2][0][0][1][0] = "dq";
  ndArray[0][0][1][0][1][1][0][2][0][0][1][1] = "dr";
  ndArray[0][0][1][0][1][1][0][2][0][0][1][2] = "ds";
  ndArray[0][0][1][0][1][1][0][2][1][0][0][0] = 15;
  ndArray[0][0][1][0][1][1][0][2][1][0][0][1] = 150;
  ndArray[0][0][1][0][1][1][0][2][1][0][0][2] = 1500;
  ndArray[0][0][1][0][1][1][0][2][1][0][1][0] = "dt";
  ndArray[0][0][1][0][1][1][0][2][1][0][1][1] = "du";
  ndArray[0][0][1][0][1][1][0][2][1][0][1][2] = "dv";
  ndArray[0][0][1][0][1][1][1][0][0][0][0][0] = 457;
  ndArray[0][0][1][0][1][1][1][0][0][0][0][1] = 7372;
  ndArray[0][0][1][0][1][1][1][0][0][0][0][2] = 7459724;
  ndArray[0][0][1][0][1][1][1][0][0][0][1][0] = "dw";
  ndArray[0][0][1][0][1][1][1][0][0][0][1][1] = "dx";
  ndArray[0][0][1][0][1][1][1][0][0][0][1][2] = "dy";
  ndArray[0][0][1][0][1][1][1][0][1][0][0][0] = 345245;
  ndArray[0][0][1][0][1][1][1][0][1][0][0][1] = 45267;
  ndArray[0][0][1][0][1][1][1][0][1][0][0][2] = 7721;
  ndArray[0][0][1][0][1][1][1][0][1][0][1][0] = "dz";
  ndArray[0][0][1][0][1][1][1][0][1][0][1][1] = "ea";
  ndArray[0][0][1][0][1][1][1][0][1][0][1][2] = "eb";
  ndArray[0][0][1][0][1][1][1][1][0][0][0][0] = 4566879;
  ndArray[0][0][1][0][1][1][1][1][0][0][0][1] = 766;
  ndArray[0][0][1][0][1][1][1][1][0][0][0][2] = 4326727;
  ndArray[0][0][1][0][1][1][1][1][0][0][1][0] = "\n";
  ndArray[0][0][1][0][1][1][1][1][0][0][1][1] = " ";
  ndArray[0][0][1][0][1][1][1][1][0][0][1][2] = "dfa45 a d";
  ndArray[0][0][1][0][1][1][1][1][1][0][0][0] = 23465;
  ndArray[0][0][1][0][1][1][1][1][1][0][0][1] = 24578;
  ndArray[0][0][1][0][1][1][1][1][1][0][0][2] = 245782;
  ndArray[0][0][1][0][1][1][1][1][1][0][1][0] = "4367 ";
  ndArray[0][0][1][0][1][1][1][1][1][0][1][1] = "saDtj45";
  ndArray[0][0][1][0][1][1][1][1][1][0][1][2] = " ";
  ndArray[0][0][1][0][1][1][1][2][0][0][0][0] = 239;
  ndArray[0][0][1][0][1][1][1][2][0][0][0][1] = 23;
  ndArray[0][0][1][0][1][1][1][2][0][0][0][2] = 3;
  ndArray[0][0][1][0][1][1][1][2][0][0][1][0] = "asd 5 Rgv3d5sx";
  ndArray[0][0][1][0][1][1][1][2][0][0][1][1] = "";
  ndArray[0][0][1][0][1][1][1][2][0][0][1][2] = "654w345 fd";
  ndArray[0][0][1][0][1][1][1][2][1][0][0][0] = 57838;
  ndArray[0][0][1][0][1][1][1][2][1][0][0][1] = 6;
  ndArray[0][0][1][0][1][1][1][2][1][0][0][2] = 145684;
  ndArray[0][0][1][0][1][1][1][2][1][0][1][0] = "rgsDFerg r sdf sd r45 3w s";
  ndArray[0][0][1][0][1][1][1][2][1][0][1][1] = "dfg tyj";
  ndArray[0][0][1][0][1][1][1][2][1][0][1][2] = "fgj56";

  if (version == 2) {
    ndArray[0][0][1][0][1][0][0][2][1][0][1][0] =
        "g>hkr   .r 35  4 5ht,,r.brt d";
  } else if (version == 3) {
    ndArray[0][0][1][0][0][0][0][2][1][0][0][2] = "di";
    ndArray[0][0][1][0][1][1][0][0][1][0][1][1] = 55;
  }

  return ndArray;
}
